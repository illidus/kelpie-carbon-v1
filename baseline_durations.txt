============================= test session starts =============================
platform win32 -- Python 3.12.10, pytest-8.4.0, pluggy-1.6.0 -- C:\Users\ryan\AppData\Local\Programs\Python\Python312\python.exe
cachedir: .pytest_cache
rootdir: C:\dev\kelpie-carbon-v1
configfile: pytest.ini
plugins: anyio-4.9.0, hydra-core-1.3.2, asyncio-1.0.0, mock-3.14.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 1383 items / 5 errors

<Dir kelpie-carbon-v1>
  <Dir scripts>
    <Module test_budget_deep_learning_suite.py>
      Budget Deep Learning Suite Test

      Comprehensive test for all budget-friendly deep learning approaches:
      1. SAM-based kelp detection (zero cost)
      2. U-Net transfer learning (minimal cost)
      3. Classical ML enhancement (zero cost)
      4. Integration and comparison testing
      <Function test_sam_detector>
        Test the SAM-based detector.
      <Function test_unet_detector>
        Test the U-Net detector.
      <Function test_spectral_integration>
        Test integration with SKEMA spectral analysis.
      <Function test_comparison_analysis>
        Test comparison between different detection methods.
      <Function test_cost_analysis>
        Analyze cost implications of different approaches.
      <Function test_deployment_readiness>
        Test deployment readiness across all approaches.
      <Function test_poetry_imports>
        Test all imports work in Poetry environment.
      <Function test_dependencies>
        Test critical dependencies.
      <Function test_memory_usage>
        Test memory requirements are reasonable.
      <Function test_processing_speed>
        Test processing speed is acceptable.
      <Function test_error_handling>
        Test graceful error handling.
    <Module test_budget_sam_integration.py>
      Budget SAM Integration Test

      Test script to validate the zero-cost SAM-based kelp detection pipeline
      works correctly with the existing SKEMA infrastructure.
      <Function test_skema_processor>
        Test the SKEMA processor functionality.
      <Function test_sam_availability>
        Test SAM model availability (without downloading).
      <Function test_budget_detector_class>
        Test the budget detector class (without model file).
      <Function test_dependencies>
        Test all required dependencies.
    <Module test_enhanced_biomass_estimation.py>
      Test script for enhanced species-specific biomass estimation with confidence intervals.

      This script demonstrates the Task C2.3 implementation:
      - Enhanced biomass prediction models per species
      - Species-specific conversion factors based on literature
      - Biomass confidence intervals and uncertainty quantification
      <Function test_biomass_estimation_scenario>
        Test biomass estimation for all scenarios.
    <Module test_morphology_detection.py>
      Test script for morphological detection functionality.

      This script demonstrates the advanced morphological detection system
      that completes Task C2.2 - Morphology-based detection algorithms.
      <Function test_pneumatocyst_detection>
        Test pneumatocyst detection capabilities.
      <Function test_blade_frond_detection>
        Test blade and frond detection capabilities.
      <Function test_species_indicators>
        Test species indicator calculations.
      <Function test_enhanced_species_classification>
        Test enhanced species classification with morphological features.
      <Function test_performance_comparison>
        Test performance comparison between basic and advanced morphology.
    <Module test_species_classifier.py>
      Test script for species classification functionality.

      This script demonstrates the species classifier with realistic data
      and shows it addresses the SKEMA Phase 4 gap.
      <Function test_nereocystis_classification>
        Test Nereocystis classification with strong indicators.
      <Function test_macrocystis_classification>
        Test Macrocystis classification with strong indicators.
      <Function test_mixed_species>
        Test mixed species classification.
      <Function test_feature_extraction>
        Test feature extraction capabilities.
      <Function test_species_enum>
        Test species enumeration.
    <Module test_utils_integration.py>
      Test script for utility modules integration.
      <Function test_array_utils>
        Test array utility functions.
      <Function test_validation_utils>
        Test validation utility functions.
      <Function test_performance_utils>
        Test performance utility functions.
      <Function test_math_utils>
        Test mathematical utility functions.
      <Function test_integration>
        Test integration between utility modules.
  <Package tests>
    <Package common>
      <Module test_data_structures.py>
        Consolidated data structure validation tests.

        This module consolidates data structure validation testing from multiple test files:
        - test_historical_baseline_analysis.py (HistoricalDataset, temporal_data validation)
        - test_environmental_testing.py (EnvironmentalCondition structure validation)
        - test_skema_biomass_integration.py (dataset structure validation)
        - test_phase3_data_acquisition.py (quality report structure validation)

        Reduces 35+ individual structure tests to 8 parameterized tests.
        <Class TestDataStructureValidation>
          Consolidated data structure validation tests.
          <Function test_invalid_data_structure_validation[test_case0]>
            Test invalid data structure validation across all classes.
          <Function test_invalid_data_structure_validation[test_case1]>
            Test invalid data structure validation across all classes.
          <Function test_valid_data_structure_creation[test_case0]>
            Test valid data structure creation across all classes.
          <Function test_valid_data_structure_creation[test_case1]>
            Test valid data structure creation across all classes.
          <Function test_valid_data_structure_creation[test_case2]>
            Test valid data structure creation across all classes.
        <Class TestContainerStructureValidation>
          Test container and collection data structure validation patterns.
          <Function test_container_structure_validation[test_case0]>
            Test validation of container data structures.
          <Function test_container_structure_validation[test_case1]>
            Test validation of container data structures.
          <Function test_container_structure_validation[test_case2]>
            Test validation of container data structures.
          <Function test_container_structure_validation[test_case3]>
            Test validation of container data structures.
          <Function test_list_structure_validation[test_case0]>
            Test validation of list data structures.
          <Function test_list_structure_validation[test_case1]>
            Test validation of list data structures.
          <Function test_list_structure_validation[test_case2]>
            Test validation of list data structures.
        <Class TestNestedStructureValidation>
          Test nested data structure validation patterns.
          <Function test_nested_structure_validation[test_case0]>
            Test validation of complex nested data structures.
          <Function test_nested_structure_validation[test_case1]>
            Test validation of complex nested data structures.
        <Class TestErrorHandlingStructures>
          Test error handling and edge case data structures.
          <Function test_error_handling_structures[test_case0]>
            Test error handling for problematic data structures.
          <Function test_error_handling_structures[test_case1]>
            Test error handling for problematic data structures.
          <Function test_error_handling_structures[test_case2]>
            Test error handling for problematic data structures.
          <Function test_error_handling_structures[test_case3]>
            Test error handling for problematic data structures.
          <Function test_error_handling_structures[test_case4]>
            Test error handling for problematic data structures.
      <Module test_error_handling.py>
        Consolidated error handling tests.

        This module consolidates error handling testing from multiple test files:
        - test_real_world_validation.py (site validation error handling)
        - test_environmental_testing.py (environmental testing error handling)
        - test_species_classifier.py (classification error handling)
        - test_historical_baseline_analysis.py (analysis error handling)
        - test_submerged_kelp_detection.py (detection error handling)
        - test_standardized_errors.py (standardized error handling)

        Reduces 45+ individual error handling tests to 6 parameterized tests.
        <Class TestAsyncErrorHandling>
          Consolidated async error handling tests.
          <Coroutine test_async_error_handling[test_case0]>
            Test async error handling across validation modules.
          <Coroutine test_async_error_handling[test_case1]>
            Test async error handling across validation modules.
        <Class TestSyncErrorHandling>
          Consolidated synchronous error handling tests.
          <Function test_sync_error_handling[test_case0]>
            Test synchronous error handling across analysis modules.
          <Function test_sync_error_handling[test_case1]>
            Test synchronous error handling across analysis modules.
        <Class TestStandardizedErrorHandling>
          Test standardized error handling patterns.
          <Function test_standardized_error_creation[test_case0]>
            Test standardized error creation patterns.
          <Function test_standardized_error_creation[test_case1]>
            Test standardized error creation patterns.
          <Function test_standardized_error_creation[test_case2]>
            Test standardized error creation patterns.
        <Class TestErrorRecoveryPatterns>
          Test error recovery and fallback patterns.
          <Function test_error_recovery_patterns[test_case0]>
            Test common error recovery patterns.
          <Function test_error_recovery_patterns[test_case1]>
            Test common error recovery patterns.
          <Function test_error_recovery_patterns[test_case2]>
            Test common error recovery patterns.
        <Class TestEdgeCaseErrorHandling>
          Test edge case error handling patterns.
          <Function test_edge_case_validation[test_case0]>
            Test edge case validation patterns.
          <Function test_edge_case_validation[test_case1]>
            Test edge case validation patterns.
          <Function test_edge_case_validation[test_case2]>
            Test edge case validation patterns.
          <Function test_edge_case_validation[test_case3]>
            Test edge case validation patterns.
      <Module test_validation_parameters.py>
        Consolidated validation parameter tests.

        This module consolidates validation parameter testing from multiple test files:
        - test_real_world_validation.py
        - test_models.py
        - test_historical_baseline_analysis.py
        - test_analytics_framework.py
        - test_field_survey_integration.py
        - test_fetch.py

        Reduces 20+ individual validation tests to 4 parameterized tests.
        <Class TestCoordinateValidation>
          Consolidated coordinate validation tests across all classes.
          <Function test_invalid_coordinate_validation[test_case0]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case1]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case2]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case3]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case4]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case5]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case6]>
            Test invalid coordinate validation across all validation classes.
          <Function test_invalid_coordinate_validation[test_case7]>
            Test invalid coordinate validation across all validation classes.
          <Function test_valid_coordinate_creation[test_case0]>
            Test valid coordinate creation across validation classes.
          <Function test_valid_coordinate_creation[test_case1]>
            Test valid coordinate creation across validation classes.
          <Function test_valid_coordinate_creation[test_case2]>
            Test valid coordinate creation across validation classes.
    <Package e2e>
      <Module test_integration_comprehensive.py>
        Comprehensive Integration Test Suite for Kelpie Carbon v1
        Tests complete system functionality across all 5 phases of development.
        <Class TestCompleteWorkflow>
          Test complete end-to-end workflow across all phases.
          <Function test_phase1_core_image_generation>
            Test Phase 1: Core Image Generation functionality.
          <Function test_phase2_spectral_visualizations>
            Test Phase 2: Enhanced spectral index visualizations with real data integration.
          <Function test_phase3_analysis_overlays>
            Test Phase 3: Analysis Overlays functionality.
          <Function test_phase4_interactive_controls>
            Test Phase 4: Interactive Controls functionality.
          <Function test_phase5_performance_polish>
            Test Phase 5: Performance & Polish functionality.
        <Class TestAPIEndpointIntegration>
          Test API endpoint integration and error handling.
          <Function test_api_error_handling>
            Test comprehensive API error handling.
          <Function test_imagery_api_error_handling>
            Test imagery API error handling.
          <Function test_cors_headers>
            Test CORS headers are properly set.
          <Function test_static_file_serving>
            Test static file serving functionality.
        <Class TestDataProcessingIntegration>
          Test data processing pipeline integration.
          <Function test_satellite_data_pipeline>
            Test complete satellite data processing pipeline.
          <Function test_image_generation_pipeline>
            Test image generation pipeline integration.
        <Class TestPerformanceIntegration>
          Test performance features integration.
          <Function test_caching_integration>
            Test caching system integration.
          <Function test_progressive_loading_endpoints>
            Test that all endpoints required for progressive loading exist.
          <Function test_error_recovery_integration>
            Test error recovery mechanisms.
          <Function test_response_times>
            Test API response times.
        <Class TestSecurityIntegration>
          Test security features integration.
          <Function test_input_validation_integration>
            Test comprehensive input validation.
          <Function test_sql_injection_prevention>
            Test SQL injection prevention (though we don't use SQL).
          <Function test_path_traversal_prevention>
            Test path traversal prevention.
        <Class TestBrowserCompatibilityIntegration>
          Test browser compatibility features.
          <Function test_content_types>
            Test proper content types are set.
          <Function test_mobile_compatibility>
            Test mobile compatibility features.
        <Class TestDocumentationIntegration>
          Test documentation and API schema integration.
          <Function test_openapi_schema>
            Test OpenAPI schema generation.
          <Function test_swagger_ui>
            Test Swagger UI availability.
          <Function test_redoc_ui>
            Test ReDoc UI availability.
      <Module test_integration_stability.py>
        Integration stability tests for Kelpie Carbon v1.

        Tests import/integration issues, satellite data sources reliability,
        and caching/performance optimizations validation for Task B1.3.
        <Class TestImportIntegrationStability>
          Test import stability and module integration reliability.
          <Function test_core_module_imports>
            Test that all core modules can be imported successfully.
          <Function test_processing_module_imports>
            Test that all processing modules can be imported successfully.
          <Function test_skema_integration_imports>
            Test that SKEMA integration components can be imported.
        <Class TestSatelliteDataSourceReliability>
          Test reliability of satellite data sources and fallback mechanisms.
          <Function test_xarray_dataset_compatibility>
            Test xarray dataset compatibility with our processing pipeline.
          <Function test_coordinate_reference_system_handling>
            Test CRS handling and coordinate transformations.
        <Class TestCachePerformanceOptimizations>
          Test caching mechanisms and performance optimizations.
          <Function test_cache_persistence_across_requests>
            Test that cached data persists across multiple requests.
          <Function test_cache_size_management>
            Test cache size management and cleanup.
      <Module test_production_readiness.py>
        Production readiness tests for Kelpie Carbon v1.

        Tests satellite data fallback mechanisms, error handling, graceful degradation,
        and performance validation under production-like conditions.
        <Class TestSatelliteDataFallback>
          Test satellite data fallback mechanisms for production reliability.
          <Function test_satellite_data_unavailable_fallback>
            Test graceful handling when satellite data is unavailable.
          <Function test_high_cloud_cover_fallback>
            Test fallback when all available imagery has high cloud cover.
          <Function test_partial_band_data_fallback>
            Test handling of imagery with missing spectral bands.
        <Class TestErrorHandlingGracefulDegradation>
          Test comprehensive error handling and graceful degradation.
          <Function test_memory_pressure_handling>
            Test behavior under memory pressure conditions.
          <Function test_invalid_coordinates_handling>
            Test handling of various invalid coordinate scenarios.
        <Class TestPerformanceValidation>
          Test performance characteristics under production loads.
          <Function test_response_time_sla>
            Test that response times meet SLA requirements.
          <Function test_cache_efficiency_production>
            Test cache efficiency under production-like access patterns.
        <Class TestSystemIntegration>
          Test complete system integration and stability.
          <Function test_full_workflow_integration>
            Test complete workflow from analysis to imagery generation.
          <Function test_health_check_endpoints>
            Test all health check endpoints are responding correctly.
          <Function test_documentation_accessibility>
            Test that API documentation is accessible.
    <Package integration>
      <Module test_integration.py>
        Integration tests for the complete kelp analysis pipeline.
        <Function test_api_endpoint_returns_non_zero_values>
          Test that the API endpoint returns meaningful non-zero values.
        <Function test_water_mask_debug>
          Debug test to understand why water mask is not being detected.
        <Function test_kelp_detection_debug>
          Debug kelp detection with known good spectral signatures.
        <Function test_full_masking_debug>
          Debug the full masking pipeline to see where kelp detection fails.
        <Function test_indices_calculation_with_realistic_data>
          Test that spectral indices are calculated correctly with realistic data.
        <Function test_masking_with_realistic_data>
          Test that masking produces meaningful results with realistic data.
        <Function test_biomass_prediction_with_realistic_data>
          Test biomass prediction with realistic data to ensure non-zero results.
        <Function test_empty_data_handling>
          Test how the pipeline handles empty or invalid data.
        <Function test_pipeline_debug_values>
          Debug test to print intermediate values throughout the pipeline.
        <Function test_api_with_mock_data>
          Test API with mocked realistic data.
      <Module test_real_satellite_data.py>
        Tests verifying Phase 9 uses real Sentinel-2 satellite data for model training and prediction.
        <Class TestRealSatelliteDataUsage>
          Test suite verifying Phase 9 uses real satellite data.
          <Function test_real_satellite_data_fetch_and_processing>
            Test that Phase 9 can fetch and process real Sentinel-2 data.
          <Function test_real_data_model_training>
            Test training a model with real satellite data.
        <Function test_phase_9_real_satellite_integration>
          Comprehensive test demonstrating Phase 9 uses real satellite data.
      <Module test_real_satellite_integration.py>
        Integration tests using real Sentinel-2 satellite data for model training and prediction.
        <Class TestRealSatelliteDataIntegration>
          Test suite for real satellite data integration.
          <Function test_real_data_model_training>
            Test training a model with real satellite data.
          <Function test_real_data_prediction_pipeline>
            Test the full pipeline with real satellite data prediction.
          <Function test_real_vs_synthetic_model_comparison>
            Compare real data trained model vs synthetic model predictions.
          <Function test_real_data_feature_extraction>
            Test feature extraction from real satellite data.
          <Function test_model_persistence_with_real_data>
            Test saving and loading model trained on real data.
          <Function test_skema_integration>
            Test integration with SKEMA validation data from University of Victoria.
        <Function test_real_satellite_data_manual>
          Manual test function for real satellite data integration.
      <Module test_satellite_imagery_integration.py>
        Integration test for the complete satellite imagery visualization pipeline.
        <Class TestSatelliteImageryIntegration>
          Test the complete satellite imagery pipeline from analysis to visualization.
          <Function test_complete_imagery_pipeline>
            Test the complete pipeline from analysis to image generation.
          <Function test_imagery_error_handling>
            Test error handling in imagery pipeline.
          <Function test_imagery_performance>
            Test imagery generation performance.
          <Function test_layer_name_mapping_functionality>
            Test that layer name mapping works correctly for frontend display.
          <Function test_layer_availability_assertions>
            Test layer availability checks for integration.
          <Function test_geographic_bounds_integration>
            Test proper geographic bounds for layer positioning.
    <Package performance>
      <Module test_optimization.py>
        Tests for optimization improvements in Kelpie Carbon v1.
        <Class TestConstants>
          Test constants are properly defined and used.
          <Function test_satellite_data_constants>
            Test satellite data constants are reasonable.
          <Function test_kelp_analysis_constants>
            Test kelp analysis constants are reasonable.
          <Function test_processing_constants>
            Test processing constants are reasonable.
          <Function test_network_constants>
            Test network constants are reasonable.
        <Class TestCacheManagement>
          Test improved cache management functionality.
          <Function test_cache_size_calculation>
            Test cache size calculation.
          <Function test_cache_access_time_tracking>
            Test LRU access time tracking.
          <Function test_cache_cleanup_by_count>
            Test cache cleanup when item count exceeds limit.
          <Function test_cache_lru_eviction>
            Test LRU eviction behavior.
        <Class TestSecurityHeaders>
          Test security headers implementation.
          <Function test_security_headers_present>
            Test that security headers are added to responses.
          <Function test_hsts_header_for_https>
            Test HSTS header is added for HTTPS requests.
        <Class TestConstantsUsage>
          Test that constants are used instead of magic numbers.
          <Function test_constants_in_fetch_module>
            Test constants are used in fetch module.
          <Function test_constants_in_api>
            Test constants are used in API calculations.
        <Class TestFileWatchingOptimization>
          Test file watching optimization.
          <Function test_selective_file_watching_config>
            Test that selective file watching is configured.
        <Class TestPystacClientFix>
          Test pystac_client deprecation fix.
          <Function test_items_method_usage>
            Test that .items() is used instead of deprecated .get_items().
        <Class TestPerformanceMetrics>
          Test performance-related optimizations.
          <Function test_image_response_caching_headers>
            Test that image responses include caching headers.
          <Function test_processing_timeout_constant>
            Test processing timeout constant is used.
      <Module test_phase5_performance.py>
        Test suite for Phase 5: Performance & Polish features
        Tests loading manager, error handling, caching, and optimization
        <Class TestImageOptimization>
          Test image optimization and caching features.
          <Function test_image_to_response_png_optimization>
            Test PNG optimization in image response.
          <Function test_image_to_response_jpeg_optimization>
            Test JPEG optimization with quality settings.
          <Function test_image_optimization_file_size>
            Test that optimization reduces file size.
        <Class TestErrorHandling>
          Test enhanced error handling and fallbacks.
          <Function test_api_error_handling_invalid_analysis_id>
            Test API error handling for invalid analysis ID.
          <Function test_api_error_handling_missing_data>
            Test API error handling for missing data.
          <Function test_rgb_endpoint_error_handling>
            Test RGB endpoint error handling.
        <Class TestCachingBehavior>
          Test caching and performance optimizations.
          <Function test_cache_headers_present>
            Test that proper cache headers are set.
          <Function test_etag_generation>
            Test ETag generation for images.
          <Function test_different_images_different_etags>
            Test that different images generate different ETags.
        <Class TestProgressiveLoading>
          Test progressive loading functionality.
          <Function test_layer_priority_order>
            Test that layers are loaded in correct priority order for async loading.
          <Function test_loading_state_management>
            Test loading state management logic.
          <Function test_layer_bounds_fetching_performance>
            Test layer bounds fetching performance for async loading.
        <Class TestMemoryManagement>
          Test memory management and cleanup.
          <Function test_cache_size_limits>
            Test that cache respects size limits.
          <Function test_memory_cleanup>
            Test memory cleanup functionality.
        <Class TestPerformanceMonitoring>
          Test performance monitoring functionality.
          <Function test_timing_operations>
            Test operation timing functionality.
          <Function test_cache_efficiency_calculation>
            Test cache efficiency calculation.
        <Class TestEndToEndPerformance>
          End-to-end performance tests.
          <Function test_api_response_times>
            Test that API responses are within acceptable time limits.
          <Coroutine test_concurrent_requests>
            Test handling of concurrent requests.
        <Class TestErrorRecovery>
          Test error recovery and fallback mechanisms.
          <Function test_retry_mechanism>
            Test retry mechanism with exponential backoff.
          <Function test_fallback_behavior>
            Test fallback behavior when primary systems fail.
    <Module test_optimization.py>
      Tests for optimization module - Task A2.8: Comprehensive testing.

      This module tests the threshold optimization functionality including
      adaptive thresholding, environmental condition handling, and real-time optimization.
      <Class TestThresholdOptimizer>
        Test the ThresholdOptimizer class.
        <Function test_load_validation_results>
          Test loading validation results from JSON file.
        <Function test_analyze_detection_rates>
          Test detection rate analysis.
        <Function test_calculate_optimal_thresholds_over_detection>
          Test threshold calculation for over-detection scenario.
        <Function test_create_adaptive_config_kelp_farm>
          Test adaptive configuration for kelp farm sites.
        <Function test_create_adaptive_config_open_ocean>
          Test adaptive configuration for open ocean sites.
        <Function test_create_adaptive_config_high_cloud_cover>
          Test adaptive configuration adjustment for high cloud cover.
        <Function test_create_adaptive_config_turbidity_effects>
          Test adaptive configuration adjustment for different turbidity levels.
        <Function test_optimize_for_real_time>
          Test real-time optimization configuration.
        <Function test_generate_recommendations_critical>
          Test recommendation generation for critical over-detection.
        <Function test_generate_recommendations_good_accuracy>
          Test recommendation generation for good accuracy.
        <Function test_save_optimization_results>
          Test saving optimization results to JSON file.
        <Function test_run_comprehensive_optimization>
          Test comprehensive optimization workflow.
      <Class TestOptimizationUtilityFunctions>
        Test utility functions for optimization.
        <Function test_optimize_detection_pipeline>
          Test main optimization pipeline function.
        <Function test_get_optimized_config_for_site>
          Test getting optimized configuration for specific site.
      <Class TestOptimizationEdgeCases>
        Test edge cases and error handling in optimization.
        <Function test_empty_validation_results>
          Test handling of empty validation results.
        <Function test_under_detection_scenario>
          Test optimization for under-detection scenario.
        <Function test_invalid_site_type>
          Test handling of invalid site type.
        <Function test_missing_environmental_conditions>
          Test handling of missing environmental condition parameters.
        <Function test_extreme_processing_time_target>
          Test real-time optimization with extreme processing time targets.
      <Class TestOptimizationPerformance>
        Test performance aspects of optimization.
        <Function test_optimization_performance_benchmarks>
          Test that optimization completes within reasonable time.
        <Function test_memory_efficiency>
          Test memory efficiency of optimization operations.
      <Class TestOptimizationIntegration>
        Integration tests for optimization with real components.
        <Function test_integration_with_validation_pipeline>
          Test optimization integration with validation pipeline.
        <Function test_optimization_scenario_validation>
          Test that optimized scenarios produce valid configurations.
    <Package unit>
      <Module test_analytics_framework.py>
        Unit tests for Analytics Framework

        Tests for:
        - AnalyticsFramework core functionality
        - AnalysisRequest and AnalysisResult classes
        - MetricCalculator performance metrics
        - TrendAnalyzer temporal analysis
        - PerformanceMetrics tracking
        - Stakeholder report generation
        <UnitTestCase TestAnalysisRequest>
          Test AnalysisRequest data class.
          <TestCaseFunction test_empty_analysis_types>
            Test empty analysis types raise ValueError.
          <TestCaseFunction test_invalid_coordinates>
            Test invalid coordinates raise ValueError.
          <TestCaseFunction test_invalid_time_range>
            Test invalid time range raises ValueError.
          <TestCaseFunction test_valid_analysis_request>
            Test creation of valid analysis request.
        <UnitTestCase TestAnalysisResult>
          Test AnalysisResult data class.
          <TestCaseFunction test_analysis_result_creation>
            Test creation of AnalysisResult.
          <TestCaseFunction test_extract_key_findings>
            Test _extract_key_findings method.
          <TestCaseFunction test_get_summary>
            Test get_summary method.
        <UnitTestCase TestMetricCalculator>
          Test MetricCalculator class.
          <TestCaseFunction test_calculate_composite_score>
            Test composite score calculation.
          <TestCaseFunction test_calculate_composite_score_clipping>
            Test composite score calculation with out-of-range values.
          <TestCaseFunction test_calculate_detection_metrics>
            Test detection metrics calculation.
          <TestCaseFunction test_calculate_detection_metrics_edge_cases>
            Test detection metrics with edge cases.
          <TestCaseFunction test_calculate_temporal_metrics>
            Test temporal metrics calculation.
          <TestCaseFunction test_calculate_temporal_metrics_insufficient_data>
            Test temporal metrics with insufficient data.
        <UnitTestCase TestTrendAnalyzer>
          Test TrendAnalyzer class.
          <TestCaseFunction test_analyze_kelp_trends_insufficient_data>
            Test trend analysis with insufficient data.
          <TestCaseFunction test_analyze_kelp_trends_linear>
            Test linear trend analysis.
          <TestCaseFunction test_analyze_kelp_trends_polynomial>
            Test polynomial trend analysis.
          <TestCaseFunction test_assess_trend_risk>
            Test risk assessment from trend analysis.
          <TestCaseFunction test_detect_change_points>
            Test change point detection.
          <TestCaseFunction test_generate_risk_recommendations>
            Test risk recommendation generation.
        <UnitTestCase TestPerformanceMetrics>
          Test PerformanceMetrics class.
          <TestCaseFunction test_check_targets>
            Test target checking logic.
          <TestCaseFunction test_get_performance_summary>
            Test performance summary generation.
          <TestCaseFunction test_get_performance_summary_no_data>
            Test performance summary with no data.
          <TestCaseFunction test_record_performance>
            Test performance recording.
        <UnitTestCase TestAnalyticsFramework>
          Test main AnalyticsFramework class.
          <TestCaseFunction test_calculate_integrated_metrics>
            Test integrated metrics calculation.
          <TestCaseFunction test_execute_analysis>
            Test analysis execution.
          <TestCaseFunction test_execute_analysis_multiple_types>
            Test analysis execution with multiple analysis types.
          <TestCaseFunction test_execute_analysis_single_type>
            Test analysis execution with single analysis type.
          <TestCaseFunction test_framework_initialization>
            Test framework initialization.
          <TestCaseFunction test_get_system_health>
            Test system health assessment.
          <TestCaseFunction test_integrate_cross_analysis>
            Test cross-analysis integration.
          <TestCaseFunction test_mock_analysis_methods>
            Test mock analysis methods return correct structure.
        <UnitTestCase TestFactoryFunctions>
          Test factory functions for easy usage.
          <TestCaseFunction test_create_analysis_request>
            Test create_analysis_request factory function.
          <TestCaseFunction test_create_analysis_request_invalid_type>
            Test create_analysis_request with invalid analysis type.
          <TestCaseFunction test_quick_analysis>
            Test quick_analysis factory function.
          <TestCaseFunction test_quick_analysis_comprehensive>
            Test quick_analysis with comprehensive analysis.
        <UnitTestCase TestStakeholderReports>
          Test stakeholder report generation.
          <TestCaseFunction test_create_stakeholder_report_factory>
            Test stakeholder report factory function.
          <TestCaseFunction test_create_stakeholder_report_invalid_type>
            Test stakeholder report factory with invalid type.
          <TestCaseFunction test_first_nations_report_creation>
            Test First Nations report creation.
          <TestCaseFunction test_management_report_creation>
            Test management report creation.
          <TestCaseFunction test_report_key_messages>
            Test key message extraction for different stakeholder types.
          <TestCaseFunction test_scientific_report_creation>
            Test scientific report creation.
      <Module test_api.py>
        Tests for API module.
        <Function test_health_endpoint>
          Test health endpoint with sync client.
        <Function test_readiness_endpoint>
          Test readiness endpoint.
        <Function test_root_endpoint>
          Test that root endpoint returns web interface or API info.
        <Function test_run_analysis_endpoint>
          Test the /api/run endpoint with valid request.
        <Function test_run_analysis_endpoint_invalid_request>
          Test the /api/run endpoint with invalid request.
        <Function test_run_analysis_endpoint_invalid_coordinates>
          Test the /api/run endpoint with invalid coordinates.
      <Module test_cli.py>
        Tests for CLI module.
        <Function test_cli_help>
          Test CLI help command.
        <Function test_version_command>
          Test version command.
        <Function test_config_command>
          Test config command.
        <Function test_analyze_command_invalid_coordinates>
          Test analyze command with invalid coordinates.
        <Function test_serve_command_help>
          Test serve command help.
      <Module test_enhanced_metrics.py>
        Tests for Enhanced Validation Metrics - Task ML1
        Tests RMSE, MAE, R▓ accuracy metrics for biomass and carbon validation.
        <Class TestEnhancedValidationMetrics>
          Test suite for enhanced validation metrics functionality.
          <Function test_calculate_biomass_accuracy_metrics_basic>
            Test basic RMSE, MAE, R▓ calculation for biomass.
          <Function test_calculate_carbon_accuracy_metrics_basic>
            Test basic RMSE, MAE, R▓ calculation for carbon.
          <Function test_empty_arrays_handling>
            Test handling of empty input arrays.
          <Function test_nan_handling>
            Test handling of NaN values in input data.
          <Function test_mismatched_array_lengths>
            Test handling of mismatched array lengths.
          <Function test_validation_coordinates_constants>
            Test that validation coordinates are properly defined.
          <Function test_species_carbon_ratios>
            Test species-specific carbon content ratios.
          <Function test_validate_model_predictions_against_real_data>
            Test comprehensive validation against multiple sites.
          <Function test_generate_validation_summary>
            Test generation of validation summary across all coordinates.
          <Function test_prediction_intervals_calculation>
            Test uncertainty quantification with prediction intervals.
          <Function test_species_specific_metrics_calculation>
            Test species-specific performance metrics.
        <Class TestFactoryFunctions>
          Test factory functions for enhanced metrics.
          <Function test_create_enhanced_validation_metrics>
            Test factory function for creating metrics calculator.
          <Function test_validate_four_coordinate_sites_function>
            Test the convenience function for validating four coordinates.
          <Function test_calculate_validation_summary_function>
            Test the convenience function for calculating validation summary.
        <Class TestEdgeCases>
          Test edge cases and error handling.
          <Function test_all_zero_observations>
            Test handling when all observed values are zero.
          <Function test_identical_predictions_and_observations>
            Test perfect predictions (identical arrays).
          <Function test_single_data_point>
            Test handling of single data point.
          <Function test_validation_with_empty_results>
            Test validation summary generation with empty results.
          <Function test_temporal_metrics_with_invalid_dates>
            Test temporal metrics with invalid date information.
      <Module test_fetch.py>
        Tests for fetch module.
        <Function test_fetch_sentinel_tiles_with_mock_data>
          Test fetch_sentinel_tiles returns mock data when no credentials.
        <Function test_fetch_sentinel_tiles_invalid_coordinates>
          Test fetch_sentinel_tiles with invalid coordinates.
        <Function test_fetch_sentinel_tiles_invalid_dates>
          Test fetch_sentinel_tiles with invalid date formats.
      <Module test_field_survey_integration.py>
        Unit tests for Field Survey Data Integration - Task C2.4

        Tests field data ingestion, species validation analysis, and reporting functionality.
        <Class TestFieldSurveyRecord>
          Test FieldSurveyRecord dataclass.
          <Function test_field_survey_record_creation>
            Test creating a field survey record.
          <Function test_field_survey_record_defaults>
            Test field survey record with default values.
        <Class TestSpeciesValidationMetrics>
          Test SpeciesValidationMetrics dataclass.
          <Function test_validation_metrics_creation>
            Test creating validation metrics.
        <Class TestFieldDataIngestor>
          Test FieldDataIngestor class.
          <Function test_ingestor_initialization>
            Test ingestor initialization.
          <Function test_parse_species_list_from_string>
            Test parsing species list from string.
          <Function test_parse_species_list_from_list>
            Test parsing species list from list.
          <Function test_parse_empty_species_list>
            Test parsing empty species list.
          <Function test_convert_dict_to_record_success>
            Test successful conversion of dict to record.
          <Function test_convert_dict_to_record_with_missing_fields>
            Test conversion with missing optional fields.
          <Function test_convert_dict_to_record_with_invalid_data>
            Test conversion with invalid data.
          <Function test_ingest_csv_survey_success>
            Test successful CSV ingestion.
          <Function test_ingest_csv_survey_error>
            Test CSV ingestion with error.
          <Function test_ingest_json_survey_success>
            Test successful JSON ingestion.
          <Function test_ingest_json_survey_error>
            Test JSON ingestion with error.
        <Class TestSpeciesValidationAnalyzer>
          Test SpeciesValidationAnalyzer class.
          <Function test_analyzer_initialization>
            Test analyzer initialization.
          <Function test_create_empty_metrics>
            Test creating empty metrics.
          <Function test_calculate_species_classification_metrics>
            Test species classification metrics calculation.
          <Function test_calculate_biomass_estimation_metrics>
            Test biomass estimation metrics calculation.
          <Function test_compare_predictions_to_field_data_empty>
            Test comparison with empty data.
          <Function test_compare_predictions_to_field_data_success>
            Test successful comparison of predictions to field data.
        <Class TestFieldSurveyReporter>
          Test FieldSurveyReporter class.
          <Function test_reporter_initialization>
            Test reporter initialization.
          <Function test_assess_data_quality_excellent>
            Test data quality assessment - excellent.
          <Function test_assess_data_quality_limited>
            Test data quality assessment - limited.
          <Function test_assess_biomass_performance_excellent>
            Test biomass performance assessment - excellent.
          <Function test_assess_biomass_performance_poor>
            Test biomass performance assessment - poor.
          <Function test_generate_recommendations_good_performance>
            Test recommendations for good performance.
          <Function test_generate_recommendations_poor_performance>
            Test recommendations for poor performance.
          <Function test_generate_field_survey_summary_empty>
            Test field survey summary with empty data.
          <Function test_generate_field_survey_summary_with_data>
            Test field survey summary with data.
          <Function test_generate_comprehensive_report>
            Test comprehensive report generation.
        <Class TestFactoryFunctions>
          Test factory functions.
          <Function test_create_field_data_ingestor>
            Test field data ingestor factory function.
          <Function test_create_validation_analyzer>
            Test validation analyzer factory function.
          <Function test_create_survey_reporter>
            Test survey reporter factory function.
        <Class TestIntegrationScenarios>
          Test integration scenarios combining multiple components.
          <Function test_end_to_end_field_survey_processing>
            Test end-to-end field survey data processing.
          <Function test_mixed_species_validation_scenario>
            Test validation scenario with mixed species.
          <Function test_performance_degradation_scenario>
            Test scenario with performance degradation patterns.
      <Module test_historical_baseline_analysis.py>
        Unit tests for Historical Baseline Analysis module.

        This module tests the comprehensive historical baseline analysis capabilities,
        including historical data digitization, change detection algorithms, and temporal
        trend analysis following UVic methodology.
        <Class TestHistoricalSite>
          Test HistoricalSite data structure.
          <Function test_valid_site_creation>
            Test creating a valid historical site.
          <Function test_invalid_latitude>
            Test validation of latitude bounds.
          <Function test_invalid_longitude>
            Test validation of longitude bounds.
          <Function test_invalid_historical_period>
            Test validation of historical period.
          <Function test_invalid_quality>
            Test validation of digitization quality.
        <Class TestHistoricalDataset>
          Test HistoricalDataset data structure.
          <Function test_valid_dataset_creation>
            Test creating a valid historical dataset.
          <Function test_empty_temporal_data>
            Test validation of empty temporal data.
          <Function test_negative_baseline_extent>
            Test validation of negative baseline extent.
        <Class TestChangeDetectionAnalyzer>
          Test ChangeDetectionAnalyzer functionality.
          <Function test_detect_significant_changes_mann_kendall>
            Test change detection using Mann-Kendall test.
          <Function test_detect_significant_changes_t_test>
            Test change detection using t-test.
          <Function test_detect_significant_changes_wilcoxon>
            Test change detection using Wilcoxon test.
          <Function test_invalid_method>
            Test error handling for invalid method.
          <Function test_mann_kendall_test_insufficient_data>
            Test Mann-Kendall test with insufficient data.
          <Function test_mann_kendall_test_increasing_trend>
            Test Mann-Kendall test with increasing trend.
          <Function test_mann_kendall_test_decreasing_trend>
            Test Mann-Kendall test with decreasing trend.
          <Function test_analyze_change_patterns>
            Test comprehensive change pattern analysis.
        <Class TestTemporalTrendAnalyzer>
          Test TemporalTrendAnalyzer functionality.
          <Function test_analyze_temporal_trends>
            Test comprehensive temporal trend analysis.
          <Function test_analyze_temporal_trends_no_forecast>
            Test temporal trend analysis without forecast.
          <Function test_calculate_trend_metrics_insufficient_data>
            Test trend metrics with insufficient data.
          <Function test_calculate_trend_metrics_sufficient_data>
            Test trend metrics with sufficient data.
          <Function test_analyze_seasonal_patterns_insufficient_data>
            Test seasonal pattern analysis with insufficient data.
          <Function test_detect_cyclical_patterns_insufficient_data>
            Test cyclical pattern detection with insufficient data.
          <Function test_detect_cyclical_patterns_sufficient_data>
            Test cyclical pattern detection with sufficient data.
          <Function test_generate_forecast_insufficient_data>
            Test forecast generation with insufficient data.
          <Function test_generate_forecast_sufficient_data>
            Test forecast generation with sufficient data.
          <Function test_assess_trend_risks_high_risk>
            Test risk assessment for high-risk trends.
          <Function test_assess_trend_risks_low_risk>
            Test risk assessment for low-risk trends.
        <Class TestHistoricalBaselineAnalysis>
          Test main HistoricalBaselineAnalysis framework.
          <Function test_create_historical_site>
            Test creating and registering a historical site.
          <Function test_digitize_historical_data>
            Test historical data digitization.
          <Function test_digitize_historical_data_site_not_found>
            Test error handling for missing site.
          <Function test_apply_quality_control>
            Test quality control procedures.
          <Function test_calculate_data_quality_metrics>
            Test data quality metrics calculation.
          <Function test_perform_comprehensive_analysis>
            Test comprehensive analysis workflow.
          <Function test_perform_comprehensive_analysis_missing_dataset>
            Test error handling for missing dataset.
          <Function test_generate_comparison_report>
            Test comparative analysis report generation.
          <Function test_generate_comparison_report_missing_sites>
            Test error handling for missing sites in comparison.
          <Function test_generate_comparison_report_json_format>
            Test JSON format output for comparison report.
          <Function test_generate_comparison_report_markdown_format>
            Test Markdown format output for comparison report.
          <Function test_export_results>
            Test exporting results to file.
          <Function test_export_results_with_visualizations>
            Test exporting results with visualizations.
          <Function test_export_results_missing_site>
            Test error handling for missing site in export.
        <Class TestFactoryFunctions>
          Test factory functions for creating historical sites and datasets.
          <Function test_create_uvic_historical_sites>
            Test creation of UVic historical sites.
          <Function test_create_sample_historical_dataset>
            Test creation of sample historical dataset.
        <Class TestIntegrationScenarios>
          Test integration scenarios and edge cases.
          <Function test_complete_workflow>
            Test complete analysis workflow from start to finish.
          <Function test_error_recovery>
            Test error recovery and graceful degradation.
          <Function test_minimal_data_analysis>
            Test analysis with minimal data.
      <Module test_imagery.py>
        Tests for satellite imagery visualization functionality.
        <Class TestImageryUtils>
          Test utility functions for imagery processing.
          <Function test_normalize_band>
            Test band normalization.
          <Function test_normalize_band_with_nan>
            Test band normalization with NaN values.
          <Function test_normalize_to_0_1>
            Test data normalization to 0-1 range.
          <Function test_apply_colormap>
            Test colormap application.
          <Function test_array_to_image_rgb>
            Test converting RGB array to PIL Image.
          <Function test_array_to_image_rgba>
            Test converting RGBA array to PIL Image.
          <Function test_array_to_image_grayscale>
            Test converting grayscale array to PIL Image.
          <Function test_get_image_bounds>
            Test extracting geographical bounds.
          <Function test_create_rgba_overlay>
            Test creating RGBA overlay from mask.
          <Function test_enhance_contrast>
            Test contrast enhancement.
          <Function test_calculate_histogram_stretch>
            Test histogram stretch calculation.
        <Class TestImageGenerators>
          Test image generation functions.
          <Function test_generate_rgb_composite_red_only>
            Test RGB composite with only red band.
          <Function test_generate_rgb_composite_missing_band>
            Test RGB composite with missing band.
          <Function test_generate_false_color_composite>
            Test false-color composite generation.
          <Function test_generate_false_color_missing_bands>
            Test false-color composite with missing bands.
          <Function test_generate_spectral_visualization>
            Test spectral index visualization.
        <Class TestOverlayGenerators>
          Test overlay generation functions.
          <Function test_generate_kelp_mask_overlay>
            Test kelp mask overlay generation.
          <Function test_generate_water_mask_overlay>
            Test water mask overlay generation.
          <Function test_generate_cloud_mask_overlay>
            Test cloud mask overlay generation.
          <Function test_generate_mask_overlay_missing_data>
            Test mask overlay with missing data.
          <Function test_generate_biomass_heatmap>
            Test biomass heatmap generation.
          <Function test_generate_biomass_heatmap_no_data>
            Test biomass heatmap with no valid data.
          <Function test_generate_biomass_heatmap_custom_scaling>
            Test biomass heatmap with custom scaling.
        <Class TestImageryIntegration>
          Integration tests for imagery functionality.
          <Function test_full_imagery_pipeline>
            Test complete imagery generation pipeline.
          <Function test_imagery_with_real_satellite_data_structure>
            Test imagery generation with realistic satellite data structure.
          <Function test_memory_efficiency>
            Test memory efficiency with larger datasets.
          <Function test_error_handling>
            Test error handling in imagery generation.
          <Function test_image_quality_metrics>
            Test that generated images meet quality standards.
      <Module test_imagery_api.py>
        Tests for satellite imagery API endpoints.
        <Class TestImageryAPI>
          Test imagery API endpoints.
          <Function test_imagery_health_check>
            Test imagery service health check.
          <Function test_get_nonexistent_analysis>
            Test accessing non-existent analysis.
      <Module test_indices.py>
        Tests for indices module.
        <Function test_fai_positive_when_nir_gt_re>
          Test that FAI is positive when NIR > red edge.
        <Function test_calculate_indices_from_dataset>
          Test calculation of indices from xarray dataset.
      <Module test_mask.py>
        Tests for mask module.
        <Function test_apply_mask_basic>
          Test basic masking functionality.
        <Function test_apply_mask_with_custom_config>
          Test masking with custom configuration.
        <Function test_create_cloud_mask>
          Test cloud mask creation.
        <Function test_create_water_mask>
          Test water mask creation using NDWI.
        <Function test_create_kelp_detection_mask>
          Test kelp detection mask creation.
        <Function test_calculate_fai>
          Test Floating Algae Index calculation.
        <Function test_calculate_red_edge_ndvi>
          Test Red Edge NDVI calculation.
        <Function test_remove_small_objects>
          Test small object removal from binary mask.
        <Function test_get_mask_statistics>
          Test mask statistics calculation.
        <Function test_cloud_mask_without_cloud_data>
          Test cloud mask creation when no cloud data is available.
        <Function test_cloud_shadow_detection>
          Test cloud shadow detection functionality.
        <Function test_mask_integration>
          Test integration of all masking components.
        <Function test_edge_cases>
          Test edge cases and error handling.
        <Function test_fai_calculation_edge_values>
          Test FAI calculation with edge values.
        <Function test_mask_consistency>
          Test that masks are consistent with each other.
      <Module test_model.py>
        Tests for biomass prediction model functionality.
        <Function test_kelp_biomass_model_initialization>
          Test KelpBiomassModel initialization.
        <Function test_extract_features>
          Test feature extraction from satellite dataset.
        <Function test_spectral_indices_calculation>
          Test spectral indices calculation.
        <Function test_kelp_patch_analysis>
          Test kelp patch analysis.
        <Function test_spatial_features_calculation>
          Test spatial features calculation.
        <Function test_predict_with_synthetic_model>
          Test biomass prediction using synthetic model.
        <Function test_generate_training_data>
          Test synthetic training data generation.
        <Function test_model_training>
          Test Random Forest model training.
        <Function test_trained_model_prediction>
          Test prediction with a trained model.
        <Function test_predict_biomass_function>
          Test the main predict_biomass function.
        <Function test_model_save_load>
          Test model saving and loading.
        <Function test_feature_consistency>
          Test that feature extraction is consistent across different datasets.
        <Function test_model_with_missing_bands>
          Test model behavior with missing spectral bands.
        <Function test_edge_case_empty_kelp_mask>
          Test model with empty kelp mask.
        <Function test_training_data_quality>
          Test quality and consistency of generated training data.
        <Function test_model_robustness>
          Test model robustness with extreme values.
        <Function test_empty_array_handling>
          Test that empty arrays are handled without RuntimeWarnings.
        <Function test_all_nan_array_handling>
          Test handling of arrays with all NaN values.
        <Function test_model_statistical_operations_safe>
          Test that model statistical operations don't generate RuntimeWarnings.
      <Module test_models.py>
        Tests for API models and validation.
        <Class TestCoordinateModel>
          Test coordinate validation.
          <Function test_valid_coordinates>
            Test valid coordinate creation.
          <Function test_latitude_validation>
            Test latitude boundary validation.
          <Function test_longitude_validation>
            Test longitude boundary validation.
          <Function test_string_coordinates>
            Test that string coordinates are rejected.
        <Class TestAnalysisRequest>
          Test analysis request validation.
          <Function test_valid_request>
            Test valid analysis request creation.
          <Function test_date_format_validation>
            Test date format validation.
          <Function test_date_order_validation>
            Test that end_date must be after start_date.
        <Class TestAnalysisResponse>
          Test analysis response model.
          <Function test_valid_response_creation>
            Test creating a valid analysis response.
          <Function test_status_enum>
            Test analysis status enum values.
        <Class TestHealthResponse>
          Test health response model.
          <Function test_health_response_creation>
            Test creating a health response.
        <Class TestReadinessResponse>
          Test readiness response model.
          <Function test_readiness_response_creation>
            Test creating a readiness response.
        <Class TestMaskStatisticsModel>
          Test mask statistics model.
          <Function test_coverage_validation>
            Test coverage ratio validation.
          <Function test_pixel_count_validation>
            Test pixel count validation.
        <Class TestErrorResponse>
          Test error response model.
          <Function test_error_response_creation>
            Test creating an error response.
        <Class TestModelSerialization>
          Test model serialization and deserialization.
          <Function test_analysis_request_json>
            Test analysis request JSON serialization.
          <Function test_analysis_response_json>
            Test analysis response JSON serialization.
      <Module test_morphology_detector.py>
        Test morphological detection functionality.
        <Class TestMorphologyType>
          Test MorphologyType enumeration.
          <Function test_morphology_types>
            Test that all expected morphology types are available.
        <Class TestMorphologicalFeature>
          Test MorphologicalFeature dataclass.
          <Function test_morphological_feature_creation>
            Test creating a morphological feature.
        <Class TestMorphologyDetectionResult>
          Test MorphologyDetectionResult dataclass.
          <Function test_detection_result_creation>
            Test creating a morphology detection result.
        <Class TestPneumatocystDetector>
          Test PneumatocystDetector class.
          <Function test_pneumatocyst_detector_init>
            Test pneumatocyst detector initialization.
          <Function test_detect_pneumatocysts_basic>
            Test basic pneumatocyst detection.
          <Function test_detect_pneumatocysts_empty_mask>
            Test pneumatocyst detection with empty mask.
          <Function test_circularity_calculation>
            Test circularity calculation method.
          <Function test_confidence_calculation>
            Test pneumatocyst confidence calculation.
        <Class TestBladeFromdDetector>
          Test BladeFromdDetector class.
          <Function test_blade_frond_detector_init>
            Test blade/frond detector initialization.
          <Function test_detect_blades_and_fronds_basic>
            Test basic blade/frond detection.
          <Function test_classify_blade_or_frond>
            Test blade vs frond classification logic.
          <Function test_boundary_complexity_calculation>
            Test boundary complexity calculation.
        <Class TestMorphologyDetector>
          Test main MorphologyDetector class.
          <Function test_morphology_detector_init>
            Test morphology detector initialization.
          <Function test_analyze_morphology_basic>
            Test basic morphological analysis.
          <Function test_analyze_morphology_empty_mask>
            Test morphological analysis with empty mask.
          <Function test_calculate_overall_confidence>
            Test overall confidence calculation.
          <Function test_calculate_species_indicators>
            Test species indicator calculation.
          <Function test_analyze_morphology_error_handling>
            Test error handling in morphological analysis.
        <Class TestCreateMorphologyDetector>
          Test factory function.
          <Function test_create_morphology_detector>
            Test creating morphology detector through factory function.
        <Class TestIntegrationWithSpeciesClassifier>
          Test integration with species classification system.
          <Function test_morphology_integration>
            Test that morphology detector integrates properly with species classifier.
          <Function test_morphology_features_in_classification>
            Test that morphological features are properly extracted for classification.
      <Module test_phase3_data_acquisition.py>
        Tests for Phase 3 Real Data Acquisition System.

        This module tests the Phase 3 data acquisition framework for Task C1.5
        real-world validation capabilities.
        <Class TestValidationSite>
          Test the ValidationSite dataclass.
          <Function test_validation_site_creation>
            Test creating a validation site.
        <Class TestSatelliteScene>
          Test the SatelliteScene dataclass.
          <Function test_satellite_scene_creation>
            Test creating a satellite scene.
        <Class TestPhase3DataAcquisition>
          Test the Phase3DataAcquisition class.
          <Function test_initialization>
            Test acquisition system initialization.
          <Function test_get_validation_sites_no_filter>
            Test getting all validation sites without filters.
          <Function test_get_validation_sites_region_filter>
            Test getting validation sites filtered by region.
          <Function test_get_validation_sites_species_filter>
            Test getting validation sites filtered by species.
          <Function test_get_validation_sites_confidence_filter>
            Test getting validation sites filtered by confidence.
          <Function test_create_synthetic_sentinel2_scenes>
            Test creating synthetic Sentinel-2 scenes.
          <Function test_create_synthetic_scenes_invalid_site>
            Test creating synthetic scenes for invalid site.
          <Function test_cloud_coverage_simulation>
            Test cloud coverage simulation for different regions.
          <Function test_data_quality_determination>
            Test data quality determination from cloud coverage.
          <Function test_season_phase_determination>
            Test season phase determination.
          <Function test_create_validation_dataset>
            Test creating a complete validation dataset.
          <Function test_quality_metrics_calculation>
            Test quality metrics calculation.
          <Function test_create_benchmark_suite>
            Test creating benchmark suite.
          <Function test_save_and_load_validation_dataset>
            Test saving and loading validation datasets.
          <Function test_get_site_summary>
            Test getting site summary.
          <Function test_generate_quality_report>
            Test generating quality report.
        <Class TestFactoryFunctions>
          Test factory functions and convenience APIs.
          <Function test_create_phase3_data_acquisition>
            Test factory function.
          <Function test_get_validation_sites_function>
            Test high-level get_validation_sites function.
          <Function test_create_benchmark_dataset_function>
            Test high-level create_benchmark_dataset function.
          <Function test_create_full_benchmark_suite_function>
            Test high-level create_full_benchmark_suite function.
        <Class TestIntegrationScenarios>
          Test realistic integration scenarios.
          <Function test_full_validation_workflow>
            Test complete validation workflow.
          <Function test_multi_region_diversity>
            Test diversity across multiple regions.
          <Function test_seasonal_coverage_analysis>
            Test seasonal coverage across sites.
          <Function test_quality_filtering_workflow>
            Test quality filtering and assessment workflow.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_scenes_quality_metrics>
            Test quality metrics with empty scenes list.
          <Function test_single_scene_dataset>
            Test dataset with single scene.
          <Function test_cross_year_kelp_season>
            Test handling kelp seasons that cross year boundaries.
          <Function test_southern_hemisphere_seasons>
            Test Southern Hemisphere seasonal patterns.
          <Function test_invalid_site_operations>
            Test operations with invalid site IDs.
          <Function test_load_nonexistent_file>
            Test loading dataset from nonexistent file.
          <Function test_benchmark_suite_with_invalid_sites>
            Test benchmark suite creation with some invalid sites.
      <Module test_real_data_acquisition.py>
        Tests for Real Satellite Data Acquisition System.

        This module tests the real data acquisition framework for validating kelp detection
        algorithms against actual satellite imagery and ground truth data.
        <Class TestValidationSite>
          Test the ValidationSite dataclass.
          <Function test_validation_site_creation>
            Test creating a validation site.
        <Class TestSatelliteScene>
          Test the SatelliteScene dataclass.
          <Function test_satellite_scene_creation>
            Test creating a satellite scene.
        <Class TestGroundTruthData>
          Test the GroundTruthData dataclass.
          <Function test_ground_truth_data_creation>
            Test creating ground truth data.
        <Class TestValidationDataset>
          Test the ValidationDataset dataclass.
          <Function test_validation_dataset_creation>
            Test creating a validation dataset.
        <Class TestRealDataAcquisition>
          Test the RealDataAcquisition class.
          <Function test_initialization>
            Test acquisition system initialization.
          <Function test_validation_sites_initialization>
            Test validation sites database initialization.
          <Function test_get_validation_sites_no_filter>
            Test getting all validation sites without filters.
          <Function test_get_validation_sites_region_filter>
            Test getting validation sites filtered by region.
          <Function test_get_validation_sites_species_filter>
            Test getting validation sites filtered by species.
          <Function test_get_validation_sites_combined_filter>
            Test getting validation sites with combined region and species filters.
          <Function test_create_synthetic_satellite_data>
            Test creating synthetic satellite data.
          <Function test_create_synthetic_satellite_data_date_range>
            Test creating synthetic satellite data with custom date range.
          <Function test_create_synthetic_satellite_data_invalid_site>
            Test creating synthetic data for invalid site.
          <Function test_create_synthetic_ground_truth>
            Test creating synthetic ground truth data.
          <Function test_create_synthetic_ground_truth_seasonal_variation>
            Test that synthetic ground truth shows seasonal variation.
          <Function test_create_synthetic_ground_truth_invalid_site>
            Test creating synthetic ground truth for invalid site.
          <Function test_calculate_dataset_quality_metrics>
            Test calculation of dataset quality metrics.
          <Function test_calculate_dataset_quality_metrics_empty>
            Test quality metrics calculation with empty data.
          <Function test_create_validation_dataset>
            Test creating a complete validation dataset.
          <Function test_create_validation_dataset_invalid_site>
            Test creating validation dataset for invalid site.
          <Function test_save_and_load_validation_dataset>
            Test saving and loading validation datasets.
          <Function test_save_validation_dataset_custom_filename>
            Test saving validation dataset with custom filename.
          <Function test_create_benchmark_suite>
            Test creating a benchmark suite across multiple sites.
          <Function test_create_benchmark_suite_all_sites>
            Test creating benchmark suite for all sites.
          <Function test_create_benchmark_suite_invalid_site>
            Test creating benchmark suite with invalid site.
          <Function test_get_site_summary>
            Test getting site summary statistics.
        <Class TestFactoryFunctions>
          Test factory functions and high-level interfaces.
          <Function test_create_real_data_acquisition>
            Test factory function for creating acquisition system.
          <Function test_get_validation_sites_function>
            Test high-level get_validation_sites function.
          <Function test_create_benchmark_dataset_function>
            Test high-level create_benchmark_dataset function.
        <Class TestIntegrationScenarios>
          Test integration scenarios and realistic workflows.
          <Function test_full_validation_workflow>
            Test complete validation dataset creation and usage workflow.
          <Function test_multi_site_benchmark_creation>
            Test creating benchmarks across multiple diverse sites.
          <Function test_seasonal_validation_scenarios>
            Test validation across different seasonal scenarios.
          <Function test_quality_assessment_workflow>
            Test quality assessment and filtering workflow.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_scenes_list>
            Test handling empty scenes list.
          <Function test_single_scene_dataset>
            Test creating dataset with single scene.
          <Function test_cross_year_kelp_season>
            Test handling kelp seasons that cross year boundaries.
          <Function test_invalid_date_range>
            Test handling invalid date ranges.
          <Function test_load_nonexistent_file>
            Test loading dataset from nonexistent file.
          <Function test_save_to_readonly_directory>
            Test saving dataset to readonly directory.
      <Module test_satellite_optimization.py>
        Unit tests for satellite data optimization module.
        Tests dual-satellite fusion, cloud masking, and carbon market optimization.
        <Class TestSatelliteOptimizationConfig>
          Test SatelliteOptimizationConfig dataclass.
          <Function test_default_config>
            Test default configuration values.
          <Function test_custom_config>
            Test custom configuration values.
        <Class TestProcessingProvenance>
          Test ProcessingProvenance dataclass.
          <Function test_provenance_creation>
            Test processing provenance record creation.
        <Class TestSatelliteDataOptimization>
          Test SatelliteDataOptimization class.
          <Function test_initialization_default_config>
            Test initialization with default configuration.
          <Function test_initialization_custom_config>
            Test initialization with custom configuration.
          <Function test_implement_dual_sentinel_fusion>
            Test dual Sentinel-2A/2B fusion implementation.
          <Function test_create_enhanced_cloud_masking>
            Test enhanced cloud masking implementation.
          <Function test_implement_carbon_market_optimization>
            Test carbon market optimization framework.
        <Class TestFactoryFunctions>
          Test factory functions for easy usage.
          <Function test_create_satellite_optimization_default>
            Test satellite optimization creation with default config.
          <Function test_optimize_dual_satellite_coverage>
            Test dual satellite coverage optimization factory function.
        <Class TestEdgeCases>
          Test edge cases and error handling.
          <Function test_empty_dataset_handling>
            Test handling of empty datasets.
          <Function test_single_time_step_dataset>
            Test handling of dataset with single time step.
          <Function test_missing_spectral_bands>
            Test handling of datasets with missing spectral bands.
          <Function test_nan_values_in_data>
            Test handling of NaN values in satellite data.
          <Function test_extreme_spectral_values>
            Test handling of extreme spectral values.
          <Function test_mismatched_dataset_coordinates>
            Test handling of datasets with mismatched coordinates.
        <Class TestIntegrationScenarios>
          Test integration scenarios and workflows.
          <Function test_complete_optimization_workflow>
            Test complete satellite optimization workflow.
          <Function test_performance_with_realistic_data_size>
            Test performance with realistic data sizes.
          <Function test_multi_temporal_fusion_scenario>
            Test multi-temporal fusion scenario.
          <Function test_error_recovery_and_robustness>
            Test error recovery and system robustness.
      <Module test_simple_config.py>
        Tests for simplified configuration system.
        <Class TestSimpleConfig>
          Test simplified configuration.
          <Function test_default_configuration>
            Test default configuration values.
          <Function test_environment_variables>
            Test configuration from environment variables.
          <Function test_port_validation>
            Test port validation.
          <Function test_cloud_cover_validation>
            Test cloud cover validation.
          <Function test_timeout_validation>
            Test timeout validation.
          <Function test_get_simple_config_caching>
            Test that get_simple_config caches results.
          <Function test_get_config_for_environment>
            Test getting configuration for specific environment.
          <Function test_cors_settings>
            Test CORS configuration.
          <Function test_path_settings>
            Test path configuration.
      <Module test_skema_biomass_integration.py>
        Unit tests for SKEMA/UVic biomass integration module.
        Tests biomass validation, species-specific protocols, and ground truth integration.
        <Class TestSKEMAIntegrationConfig>
          Test SKEMAIntegrationConfig dataclass.
          <Function test_default_config>
            Test default configuration values.
          <Function test_custom_config>
            Test custom configuration values.
        <Class TestBiomassValidationSite>
          Test BiomassValidationSite dataclass.
          <Function test_site_creation>
            Test biomass validation site creation.
        <Class TestBiomassGroundTruth>
          Test BiomassGroundTruth dataclass.
          <Function test_ground_truth_creation>
            Test biomass ground truth measurement creation.
        <Class TestSKEMABiomassDatasetIntegrator>
          Test SKEMABiomassDatasetIntegrator class.
          <Function test_initialization_default_config>
            Test initialization with default configuration.
          <Function test_initialization_custom_config>
            Test initialization with custom configuration.
          <Function test_integrate_four_validation_sites_biomass_data>
            Test integration of four validation sites biomass data.
          <Function test_enhance_existing_skema_integration>
            Test enhancement of existing SKEMA integration.
          <Function test_load_uvic_saanich_inlet_data>
            Test loading UVic Saanich Inlet data.
          <Function test_integrate_species_specific_biomass_validation>
            Test species-specific biomass validation integration.
          <Function test_create_carbon_quantification_validation>
            Test carbon quantification validation creation.
        <Class TestFactoryFunctions>
          Test factory functions for easy usage.
          <Function test_create_skema_biomass_integrator_default>
            Test SKEMA biomass integrator creation with default config.
          <Function test_create_skema_biomass_integrator_custom_config>
            Test SKEMA biomass integrator creation with custom config.
        <Class TestEdgeCases>
          Test edge cases and error handling.
          <Function test_empty_validation_sites>
            Test handling of empty validation sites.
          <Function test_missing_biomass_data>
            Test handling of missing biomass data.
          <Function test_invalid_coordinates>
            Test handling of invalid coordinates.
        <Class TestIntegrationScenarios>
          Test integration scenarios and workflows.
          <Function test_complete_integration_workflow>
            Test complete SKEMA biomass integration workflow.
      <Module test_skema_integration.py>
        Tests for SKEMA integration functionality.
        <Function test_water_anomaly_filter>
          Test Water Anomaly Filter functionality.
        <Function test_waf_sunglint_detection>
          Test that WAF correctly detects sunglint areas.
        <Function test_waf_quality_metrics>
          Test WAF quality metrics calculation.
        <Function test_spectral_derivatives_calculation>
          Test spectral derivatives calculation.
        <Function test_derivative_kelp_detection>
          Test derivative-based kelp detection.
        <Function test_derivative_detection_with_config>
          Test derivative detection with custom configuration.
        <Function test_derivative_quality_metrics>
          Test derivative quality metrics calculation.
        <Function test_skema_kelp_detection_integration>
          Test integrated SKEMA kelp detection.
        <Function test_skema_detection_combination_methods>
          Test different detection combination methods.
        <Function test_skema_without_waf>
          Test SKEMA detection without Water Anomaly Filter.
        <Function test_skema_derivative_only>
          Test SKEMA detection using only derivative features.
        <Function test_edge_cases_small_dataset>
          Test SKEMA functionality with very small dataset.
        <Function test_missing_bands_handling>
          Test graceful handling of missing spectral bands.
      <Module test_species_classifier.py>
        Test species classification functionality.
        <Class TestKelpSpecies>
          Test KelpSpecies enumeration.
          <Function test_species_enumeration>
            Test that all expected species are available.
        <Class TestSpeciesClassificationResult>
          Test SpeciesClassificationResult dataclass.
          <Function test_result_initialization>
            Test result initialization with required fields.
          <Function test_result_with_biomass>
            Test result with biomass estimation.
        <Class TestSpeciesClassifier>
          Test SpeciesClassifier functionality.
          <Function test_classify_species_basic>
            Test basic species classification.
          <Function test_classify_empty_mask>
            Test classification with empty kelp mask.
          <Function test_nereocystis_indicators>
            Test Nereocystis classification with strong indicators.
          <Function test_macrocystis_indicators>
            Test Macrocystis classification with strong indicators.
          <Function test_mixed_species_indicators>
            Test mixed species classification.
          <Function test_extract_spectral_features>
            Test spectral feature extraction.
          <Function test_extract_morphological_features>
            Test morphological feature extraction.
          <Function test_detect_pneumatocysts>
            Test pneumatocyst detection.
          <Function test_detect_pneumatocysts_none_found>
            Test pneumatocyst detection when none found.
          <Function test_detect_frond_patterns>
            Test frond pattern detection.
          <Function test_biomass_estimation_nereocystis>
            Test biomass estimation for Nereocystis.
          <Function test_biomass_estimation_macrocystis>
            Test biomass estimation for Macrocystis.
          <Function test_biomass_estimation_unknown>
            Test biomass estimation for unknown species.
          <Function test_error_handling>
            Test error handling in classification.
        <Class TestFactoryFunction>
          Test factory function for creating classifiers.
          <Function test_create_species_classifier>
            Test factory function.
        <Class TestIntegration>
          Integration tests for species classification.
          <Function test_full_classification_pipeline>
            Test complete classification pipeline.
        <Function test_enhanced_biomass_estimation>
          Test enhanced biomass estimation with confidence intervals.
        <Function test_enhanced_biomass_estimation_low_confidence>
          Test enhanced biomass estimation with low classification confidence.
        <Function test_enhanced_biomass_estimation_mixed_species>
          Test enhanced biomass estimation for mixed species.
        <Function test_enhanced_biomass_estimation_bounds>
          Test that biomass estimates stay within reasonable bounds.
        <Function test_species_specific_biomass_algorithms>
          Test that different species use different biomass algorithms.
        <Function test_enhanced_classification_result_structure>
          Test that enhanced classification results include biomass estimates.
        <Function test_biomass_estimation_validation_against_literature>
          Test that biomass estimates align with published literature ranges.
      <Module test_standardized_errors.py>
        Tests for standardized error handling.
        <Class TestStandardizedErrors>
          Test standardized error handling.
          <Function test_standardized_error_structure>
            Test that standardized errors have consistent structure.
          <Function test_validation_error>
            Test validation error creation.
          <Function test_not_found_error>
            Test not found error creation.
          <Function test_coordinate_error>
            Test coordinate validation error creation.
          <Function test_date_range_error>
            Test date range validation error creation.
          <Function test_processing_error>
            Test processing error creation.
          <Function test_satellite_data_error>
            Test satellite data error creation.
          <Function test_imagery_error>
            Test imagery generation error creation.
          <Function test_service_unavailable_error>
            Test service unavailable error creation.
          <Function test_unexpected_error_handling>
            Test handling of unexpected errors.
          <Function test_error_without_optional_fields>
            Test error creation without optional fields.
          <Function test_error_inheritance>
            Test that StandardizedError inherits from HTTPException.
        <Class TestErrorCodes>
          Test error code enumeration.
          <Function test_error_code_values>
            Test that error codes have expected string values.
          <Function test_error_code_coverage>
            Test that we have error codes for different HTTP status ranges.
      <Module test_submerged_kelp_detection.py>
        Tests for Submerged Kelp Detection Enhancement.

        This module tests the submerged kelp detection framework including depth-sensitive
        detection, water column modeling, and integrated surface/submerged detection pipelines.
        <Class TestWaterColumnModel>
          Test the WaterColumnModel dataclass.
          <Function test_water_column_model_defaults>
            Test default water column model parameters.
          <Function test_water_column_model_custom>
            Test custom water column model parameters.
        <Class TestSubmergedKelpConfig>
          Test the SubmergedKelpConfig dataclass.
          <Function test_config_defaults>
            Test default configuration parameters.
          <Function test_config_custom>
            Test custom configuration parameters.
        <Class TestDepthDetectionResult>
          Test the DepthDetectionResult dataclass.
          <Function test_depth_detection_result_creation>
            Test creating a depth detection result.
        <Class TestSubmergedKelpDetector>
          Test the SubmergedKelpDetector class.
          <Function test_detector_initialization>
            Test detector initialization with and without config.
          <Function test_calculate_depth_sensitive_indices>
            Test calculation of depth-sensitive spectral indices.
          <Function test_calculate_depth_sensitive_indices_missing_bands>
            Test index calculation with missing spectral bands.
          <Function test_apply_depth_stratified_detection>
            Test depth-stratified kelp detection.
          <Function test_apply_depth_stratified_detection_species_factors>
            Test species-specific depth factor adjustments.
          <Function test_estimate_kelp_depths>
            Test kelp depth estimation.
          <Function test_model_water_column_properties>
            Test water column property modeling.
          <Function test_apply_quality_control>
            Test quality control filtering.
          <Function test_remove_small_patches>
            Test small patch removal.
          <Function test_combine_detection_layers>
            Test combining surface and submerged detection layers.
          <Function test_generate_detection_metadata>
            Test detection metadata generation.
          <Function test_detect_submerged_kelp_full_pipeline>
            Test the complete submerged kelp detection pipeline.
          <Function test_detect_submerged_kelp_without_depth_analysis>
            Test detection without depth analysis.
          <Function test_detect_submerged_kelp_error_handling>
            Test error handling in detection pipeline.
        <Class TestFactoryFunctions>
          Test factory functions and high-level interfaces.
          <Function test_create_submerged_kelp_detector>
            Test detector factory function.
          <Function test_detect_submerged_kelp_function>
            Test high-level detection function.
          <Function test_analyze_depth_distribution>
            Test depth distribution analysis.
          <Function test_analyze_depth_distribution_no_kelp>
            Test depth distribution analysis with no kelp detected.
        <Class TestIntegrationScenarios>
          Test integration scenarios and realistic use cases.
          <Function test_realistic_kelp_detection_scenario>
            Test detection with realistic kelp spectral signatures.
          <Function test_species_specific_detection_differences>
            Test that different species produce different detection results.
          <Function test_depth_estimation_accuracy>
            Test depth estimation produces reasonable results.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_dataset>
            Test handling of empty dataset.
          <Function test_dataset_with_nan_values>
            Test handling of dataset with NaN values.
          <Function test_very_small_dataset>
            Test handling of very small dataset.
          <Function test_extreme_spectral_values>
            Test handling of extreme spectral values.
          <Function test_no_water_context>
            Test detection without water context requirement.
      <Module test_temporal_validation.py>
        Tests for Temporal Validation & Environmental Drivers.

        This module tests the temporal validation framework for SKEMA kelp detection,
        including time-series persistence, seasonal patterns, and environmental correlations.
        <Class TestTemporalDataPoint>
          Test the TemporalDataPoint dataclass.
          <Function test_temporal_data_point_creation>
            Test creating a temporal data point.
        <Class TestSeasonalPattern>
          Test the SeasonalPattern dataclass.
          <Function test_seasonal_pattern_creation>
            Test creating a seasonal pattern.
        <Class TestTemporalValidator>
          Test the TemporalValidator class.
          <Function test_get_broughton_validation_config>
            Test getting Broughton Archipelago validation configuration.
          <Function test_generate_sampling_dates>
            Test generating sampling dates with specified interval.
          <Function test_calculate_kelp_area>
            Test kelp area calculation from detection mask.
          <Function test_calculate_confidence_score>
            Test confidence score calculation.
          <Function test_simulate_environmental_conditions>
            Test environmental conditions simulation.
          <Function test_assess_data_quality>
            Test data quality assessment.
          <Function test_get_season>
            Test season mapping from month.
          <Function test_analyze_seasonal_patterns>
            Test seasonal pattern analysis.
          <Function test_calculate_persistence_metrics>
            Test persistence metrics calculation.
          <Function test_analyze_environmental_correlations>
            Test environmental correlation analysis.
          <Function test_perform_trend_analysis>
            Test trend analysis.
          <Function test_assess_temporal_quality>
            Test temporal quality assessment.
          <Function test_generate_temporal_recommendations>
            Test temporal recommendation generation.
          <Coroutine test_collect_temporal_data_point>
            Test collecting a single temporal data point.
          <Coroutine test_validate_temporal_persistence>
            Test full temporal persistence validation.
          <Coroutine test_run_broughton_archipelago_validation>
            Test Broughton Archipelago validation.
          <Function test_generate_comprehensive_temporal_report>
            Test comprehensive temporal report generation.
          <Function test_calculate_detection_consistency>
            Test detection consistency calculation.
        <Class TestFactoryFunctions>
          Test factory functions and high-level interfaces.
          <Function test_create_temporal_validator>
            Test temporal validator factory function.
          <Coroutine test_run_broughton_temporal_validation>
            Test Broughton temporal validation factory function.
          <Coroutine test_run_comprehensive_temporal_analysis>
            Test comprehensive temporal analysis factory function.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_data_points>
            Test handling of empty data points list.
          <Function test_single_data_point>
            Test handling of single data point.
          <Function test_insufficient_data_for_correlations>
            Test correlation analysis with insufficient data.
          <Function test_nan_handling_in_correlations>
            Test handling of NaN values in correlation calculations.
          <Function test_extreme_detection_rates>
            Test handling of extreme detection rates.
          <Function test_temporal_gaps_identification>
            Test identification of temporal gaps.
          <Function test_insufficient_temporal_coverage>
            Test assessment with insufficient temporal coverage.
      <Module test_web_interface.py>
        Tests for web interface functionality.
        <Function test_root_serves_html>
          Test that root endpoint serves HTML content.
        <Function test_static_css_accessible>
          Test that CSS file is accessible via static mount.
        <Function test_static_js_accessible>
          Test that JavaScript file is accessible via static mount.
        <Function test_layers_js_accessible>
          Test that layers.js file is accessible via static mount.
        <Function test_layers_js_contains_async_functions>
          Test that layers.js contains async layer creation functions.
        <Function test_layers_js_layer_name_mapping>
          Test that layers.js contains layer name mapping functionality.
        <Function test_html_references_correct_static_paths>
          Test that HTML file references static files with correct paths.
        <Function test_html_contains_map_elements>
          Test that HTML contains required elements for map functionality.
        <Function test_html_contains_layer_control_elements>
          Test that HTML contains elements for layer controls.
        <Function test_html_has_proper_structure>
          Test that HTML has proper structure for the application.
        <Function test_nonexistent_static_file_returns_404>
          Test that non-existent static files return 404.
        <Function test_static_file_content_types[/static/style.css-text/css]>
          Test that static files return correct content types.
        <Function test_static_file_content_types[/static/app.js-javascript]>
          Test that static files return correct content types.
        <Function test_static_file_content_types[/static/layers.js-javascript]>
          Test that static files return correct content types.
        <Function test_javascript_contains_required_functions>
          Test that JavaScript contains required functions for map and API interaction.
        <Function test_layers_js_error_handling>
          Test that layers.js contains proper error handling.
        <Function test_layers_js_bounds_functionality>
          Test that layers.js contains bounds fetching functionality.
        <Function test_css_contains_required_styles>
          Test that CSS contains required styles for proper layout.
    <Dir validation>
      <Module test_environmental_testing.py>
        Tests for Environmental Robustness Testing Framework.

        This module tests the environmental condition validation for SKEMA kelp detection,
        including tidal effects, water clarity, and seasonal variations.
        <Class TestEnvironmentalRobustnessValidator>
          Test the EnvironmentalRobustnessValidator class.
          <Function test_environmental_conditions_definition>
            Test that environmental conditions are properly defined.
          <Function test_environmental_condition_structure>
            Test environmental condition data structure.
          <Function test_tidal_correction_application>
            Test tidal height correction application.
          <Function test_tidal_correction_high_tide>
            Test high tide correction increases detection.
          <Function test_tidal_correction_no_parameters>
            Test tidal correction with no tidal parameters.
          <Function test_consistency_score_calculation>
            Test spatial consistency score calculation.
          <Function test_condition_success_evaluation>
            Test condition success evaluation logic.
          <Function test_condition_success_different_types>
            Test success evaluation for different condition types.
          <Function test_failed_result_creation>
            Test creation of failed test results.
          <Coroutine test_environmental_condition_testing_success>
            Test successful environmental condition testing.
          <Coroutine test_environmental_condition_testing_no_data>
            Test environmental condition testing with no satellite data.
          <Coroutine test_environmental_condition_testing_empty_dataset>
            Test environmental condition testing with empty dataset.
          <Coroutine test_environmental_condition_testing_exception>
            Test environmental condition testing with exception.
          <Function test_report_generation>
            Test environmental testing report generation.
          <Coroutine test_comprehensive_testing>
            Test comprehensive environmental testing.
        <Class TestEnvironmentalTestingIntegration>
          Integration tests for environmental testing.
          <Coroutine test_tidal_effects_convenience_function>
            Test tidal effects convenience function.
          <Function test_environmental_testing_imports>
            Test that all required imports are available.
        <Class TestEnvironmentalConditionValidation>
          Test environmental condition validation logic.
          <Function test_tidal_correction_factors>
            Test that tidal correction factors match research values.
          <Function test_water_clarity_parameters>
            Test water clarity condition parameters.
          <Function test_seasonal_parameters>
            Test seasonal condition parameters.
        <Class TestEnvironmentalRealWorldScenarios>
          Test environmental conditions with realistic scenarios.
          <Function test_broughton_archipelago_tidal_scenario>
            Test realistic tidal scenario for Broughton Archipelago.
          <Function test_monterey_bay_clear_water_scenario>
            Test clear water scenario for Monterey Bay.
          <Function test_seasonal_variation_realistic_ranges>
            Test seasonal variations with realistic detection ranges.
      <Module test_real_world_validation.py>
        Comprehensive tests for real-world SKEMA validation framework.

        Tests the actual validation of kelp detection algorithms against real satellite
        imagery from validated kelp farm locations as specified in Task A2.5.

        Validation Sites:
        - Broughton Archipelago: UVic primary SKEMA site
        - Saanich Inlet: Multi-species validation
        - Monterey Bay: Giant kelp validation
        - Control Sites: False positive testing
        <Class TestRealWorldValidation>
          Test suite for real-world kelp detection validation.
          <Function test_validation_site_initialization>
            Test that validation sites are properly initialized.
          <Function test_validation_site_coordinate_validation>
            Test coordinate validation for validation sites.
          <Coroutine test_validate_site_success>
            Test successful validation of a single site.
          <Coroutine test_validate_site_high_cloud_cover>
            Test validation with high cloud cover.
          <Coroutine test_validate_site_error_handling>
            Test error handling during site validation.
          <Coroutine test_validate_control_sites>
            Test validation of control sites for false positive testing.
          <Coroutine test_validate_all_sites>
            Test validation of all configured sites.
          <Function test_detection_success_evaluation>
            Test the detection success evaluation logic.
          <Coroutine test_validate_primary_sites_convenience_function>
            Test the convenience function for validating primary sites only.
          <Coroutine test_validate_with_controls_convenience_function>
            Test the convenience function for validating all sites including controls.
          <Function test_validation_report_generation>
            Test validation report generation and saving.
        <Class TestRealWorldValidationIntegration>
          Integration tests for real-world validation with actual processing pipeline.
          <Coroutine test_end_to_end_validation_pipeline>
            Test complete validation pipeline with mocked satellite data.
      <Module test_skema_research_benchmarks.py>
        Real-world SKEMA validation tests using published research benchmarks.

        Tests mathematical implementations against exact results from:
        - Timmer et al. (2022): Red-edge vs NIR for submerged kelp detection
        - Uhl et al. (2016): Hyperspectral feature detection with 80.18% accuracy

        All tests use real kelp farm coordinates and published ground truth data.
        <Class TestSKEMAResearchBenchmarks>
          Validate our implementations against published SKEMA research results.
          <Function test_water_anomaly_filter_research_validation>
            Test WAF implementation against Uhl et al. (2016) methodology.
          <Function test_derivative_feature_detection_accuracy>
            Validate derivative detection achieves 80.18% accuracy benchmark.
          <Function test_ndre_vs_ndvi_depth_performance>
            Validate NDRE outperforms NDVI for submerged kelp detection.
          <Function test_broughton_archipelago_validation>
            Test our implementation against UVic's primary SKEMA validation site.
          <Function test_mathematical_precision_validation>
            Ensure our mathematical implementations exactly match research formulas.
  <Package tests_backup_20250611_164341>
    <Package e2e>
      <Module test_integration_comprehensive.py>
        Comprehensive Integration Test Suite for Kelpie Carbon v1
        Tests complete system functionality across all 5 phases of development.
        <Class TestCompleteWorkflow>
          Test complete end-to-end workflow across all phases.
          <Function test_phase1_core_image_generation>
            Test Phase 1: Core Image Generation functionality.
          <Function test_phase2_spectral_visualizations>
            Test Phase 2: Enhanced spectral index visualizations with real data integration.
          <Function test_phase3_analysis_overlays>
            Test Phase 3: Analysis Overlays functionality.
          <Function test_phase4_interactive_controls>
            Test Phase 4: Interactive Controls functionality.
          <Function test_phase5_performance_polish>
            Test Phase 5: Performance & Polish functionality.
        <Class TestAPIEndpointIntegration>
          Test API endpoint integration and error handling.
          <Function test_api_error_handling>
            Test comprehensive API error handling.
          <Function test_imagery_api_error_handling>
            Test imagery API error handling.
          <Function test_cors_headers>
            Test CORS headers are properly set.
          <Function test_static_file_serving>
            Test static file serving functionality.
        <Class TestDataProcessingIntegration>
          Test data processing pipeline integration.
          <Function test_satellite_data_pipeline>
            Test complete satellite data processing pipeline.
          <Function test_image_generation_pipeline>
            Test image generation pipeline integration.
        <Class TestPerformanceIntegration>
          Test performance features integration.
          <Function test_caching_integration>
            Test caching system integration.
          <Function test_progressive_loading_endpoints>
            Test that all endpoints required for progressive loading exist.
          <Function test_error_recovery_integration>
            Test error recovery mechanisms.
          <Function test_response_times>
            Test API response times.
        <Class TestSecurityIntegration>
          Test security features integration.
          <Function test_input_validation_integration>
            Test comprehensive input validation.
          <Function test_sql_injection_prevention>
            Test SQL injection prevention (though we don't use SQL).
          <Function test_path_traversal_prevention>
            Test path traversal prevention.
        <Class TestBrowserCompatibilityIntegration>
          Test browser compatibility features.
          <Function test_content_types>
            Test proper content types are set.
          <Function test_mobile_compatibility>
            Test mobile compatibility features.
        <Class TestDocumentationIntegration>
          Test documentation and API schema integration.
          <Function test_openapi_schema>
            Test OpenAPI schema generation.
          <Function test_swagger_ui>
            Test Swagger UI availability.
          <Function test_redoc_ui>
            Test ReDoc UI availability.
      <Module test_integration_stability.py>
        Integration stability tests for Kelpie Carbon v1.

        Tests import/integration issues, satellite data sources reliability,
        and caching/performance optimizations validation for Task B1.3.
        <Class TestImportIntegrationStability>
          Test import stability and module integration reliability.
          <Function test_core_module_imports>
            Test that all core modules can be imported successfully.
          <Function test_processing_module_imports>
            Test that all processing modules can be imported successfully.
          <Function test_skema_integration_imports>
            Test that SKEMA integration components can be imported.
        <Class TestSatelliteDataSourceReliability>
          Test reliability of satellite data sources and fallback mechanisms.
          <Function test_xarray_dataset_compatibility>
            Test xarray dataset compatibility with our processing pipeline.
          <Function test_coordinate_reference_system_handling>
            Test CRS handling and coordinate transformations.
        <Class TestCachePerformanceOptimizations>
          Test caching mechanisms and performance optimizations.
          <Function test_cache_persistence_across_requests>
            Test that cached data persists across multiple requests.
          <Function test_cache_size_management>
            Test cache size management and cleanup.
      <Module test_production_readiness.py>
        Production readiness tests for Kelpie Carbon v1.

        Tests satellite data fallback mechanisms, error handling, graceful degradation,
        and performance validation under production-like conditions.
        <Class TestSatelliteDataFallback>
          Test satellite data fallback mechanisms for production reliability.
          <Function test_satellite_data_unavailable_fallback>
            Test graceful handling when satellite data is unavailable.
          <Function test_high_cloud_cover_fallback>
            Test fallback when all available imagery has high cloud cover.
          <Function test_partial_band_data_fallback>
            Test handling of imagery with missing spectral bands.
        <Class TestErrorHandlingGracefulDegradation>
          Test comprehensive error handling and graceful degradation.
          <Function test_memory_pressure_handling>
            Test behavior under memory pressure conditions.
          <Function test_invalid_coordinates_handling>
            Test handling of various invalid coordinate scenarios.
        <Class TestPerformanceValidation>
          Test performance characteristics under production loads.
          <Function test_response_time_sla>
            Test that response times meet SLA requirements.
          <Function test_cache_efficiency_production>
            Test cache efficiency under production-like access patterns.
        <Class TestSystemIntegration>
          Test complete system integration and stability.
          <Function test_full_workflow_integration>
            Test complete workflow from analysis to imagery generation.
          <Function test_health_check_endpoints>
            Test all health check endpoints are responding correctly.
          <Function test_documentation_accessibility>
            Test that API documentation is accessible.
    <Package integration>
      <Module test_integration.py>
        Integration tests for the complete kelp analysis pipeline.
        <Function test_api_endpoint_returns_non_zero_values>
          Test that the API endpoint returns meaningful non-zero values.
        <Function test_water_mask_debug>
          Debug test to understand why water mask is not being detected.
        <Function test_kelp_detection_debug>
          Debug kelp detection with known good spectral signatures.
        <Function test_full_masking_debug>
          Debug the full masking pipeline to see where kelp detection fails.
        <Function test_indices_calculation_with_realistic_data>
          Test that spectral indices are calculated correctly with realistic data.
        <Function test_masking_with_realistic_data>
          Test that masking produces meaningful results with realistic data.
        <Function test_biomass_prediction_with_realistic_data>
          Test biomass prediction with realistic data to ensure non-zero results.
        <Function test_empty_data_handling>
          Test how the pipeline handles empty or invalid data.
        <Function test_pipeline_debug_values>
          Debug test to print intermediate values throughout the pipeline.
        <Function test_api_with_mock_data>
          Test API with mocked realistic data.
      <Module test_real_satellite_data.py>
        Tests verifying Phase 9 uses real Sentinel-2 satellite data for model training and prediction.
        <Class TestRealSatelliteDataUsage>
          Test suite verifying Phase 9 uses real satellite data.
          <Function test_real_satellite_data_fetch_and_processing>
            Test that Phase 9 can fetch and process real Sentinel-2 data.
          <Function test_real_data_model_training>
            Test training a model with real satellite data.
        <Function test_phase_9_real_satellite_integration>
          Comprehensive test demonstrating Phase 9 uses real satellite data.
      <Module test_real_satellite_integration.py>
        Integration tests using real Sentinel-2 satellite data for model training and prediction.
        <Class TestRealSatelliteDataIntegration>
          Test suite for real satellite data integration.
          <Function test_real_data_model_training>
            Test training a model with real satellite data.
          <Function test_real_data_prediction_pipeline>
            Test the full pipeline with real satellite data prediction.
          <Function test_real_vs_synthetic_model_comparison>
            Compare real data trained model vs synthetic model predictions.
          <Function test_real_data_feature_extraction>
            Test feature extraction from real satellite data.
          <Function test_model_persistence_with_real_data>
            Test saving and loading model trained on real data.
          <Function test_skema_integration>
            Test integration with SKEMA validation data from University of Victoria.
        <Function test_real_satellite_data_manual>
          Manual test function for real satellite data integration.
      <Module test_satellite_imagery_integration.py>
        Integration test for the complete satellite imagery visualization pipeline.
        <Class TestSatelliteImageryIntegration>
          Test the complete satellite imagery pipeline from analysis to visualization.
          <Function test_complete_imagery_pipeline>
            Test the complete pipeline from analysis to image generation.
          <Function test_imagery_error_handling>
            Test error handling in imagery pipeline.
          <Function test_imagery_performance>
            Test imagery generation performance.
          <Function test_layer_name_mapping_functionality>
            Test that layer name mapping works correctly for frontend display.
          <Function test_layer_availability_assertions>
            Test layer availability checks for integration.
          <Function test_geographic_bounds_integration>
            Test proper geographic bounds for layer positioning.
    <Package performance>
      <Module test_optimization.py>
        Tests for optimization improvements in Kelpie Carbon v1.
        <Class TestConstants>
          Test constants are properly defined and used.
          <Function test_satellite_data_constants>
            Test satellite data constants are reasonable.
          <Function test_kelp_analysis_constants>
            Test kelp analysis constants are reasonable.
          <Function test_processing_constants>
            Test processing constants are reasonable.
          <Function test_network_constants>
            Test network constants are reasonable.
        <Class TestCacheManagement>
          Test improved cache management functionality.
          <Function test_cache_size_calculation>
            Test cache size calculation.
          <Function test_cache_access_time_tracking>
            Test LRU access time tracking.
          <Function test_cache_cleanup_by_count>
            Test cache cleanup when item count exceeds limit.
          <Function test_cache_lru_eviction>
            Test LRU eviction behavior.
        <Class TestSecurityHeaders>
          Test security headers implementation.
          <Function test_security_headers_present>
            Test that security headers are added to responses.
          <Function test_hsts_header_for_https>
            Test HSTS header is added for HTTPS requests.
        <Class TestConstantsUsage>
          Test that constants are used instead of magic numbers.
          <Function test_constants_in_fetch_module>
            Test constants are used in fetch module.
          <Function test_constants_in_api>
            Test constants are used in API calculations.
        <Class TestFileWatchingOptimization>
          Test file watching optimization.
          <Function test_selective_file_watching_config>
            Test that selective file watching is configured.
        <Class TestPystacClientFix>
          Test pystac_client deprecation fix.
          <Function test_items_method_usage>
            Test that .items() is used instead of deprecated .get_items().
        <Class TestPerformanceMetrics>
          Test performance-related optimizations.
          <Function test_image_response_caching_headers>
            Test that image responses include caching headers.
          <Function test_processing_timeout_constant>
            Test processing timeout constant is used.
      <Module test_phase5_performance.py>
        Test suite for Phase 5: Performance & Polish features
        Tests loading manager, error handling, caching, and optimization
        <Class TestImageOptimization>
          Test image optimization and caching features.
          <Function test_image_to_response_png_optimization>
            Test PNG optimization in image response.
          <Function test_image_to_response_jpeg_optimization>
            Test JPEG optimization with quality settings.
          <Function test_image_optimization_file_size>
            Test that optimization reduces file size.
        <Class TestErrorHandling>
          Test enhanced error handling and fallbacks.
          <Function test_api_error_handling_invalid_analysis_id>
            Test API error handling for invalid analysis ID.
          <Function test_api_error_handling_missing_data>
            Test API error handling for missing data.
          <Function test_rgb_endpoint_error_handling>
            Test RGB endpoint error handling.
        <Class TestCachingBehavior>
          Test caching and performance optimizations.
          <Function test_cache_headers_present>
            Test that proper cache headers are set.
          <Function test_etag_generation>
            Test ETag generation for images.
          <Function test_different_images_different_etags>
            Test that different images generate different ETags.
        <Class TestProgressiveLoading>
          Test progressive loading functionality.
          <Function test_layer_priority_order>
            Test that layers are loaded in correct priority order for async loading.
          <Function test_loading_state_management>
            Test loading state management logic.
          <Function test_layer_bounds_fetching_performance>
            Test layer bounds fetching performance for async loading.
        <Class TestMemoryManagement>
          Test memory management and cleanup.
          <Function test_cache_size_limits>
            Test that cache respects size limits.
          <Function test_memory_cleanup>
            Test memory cleanup functionality.
        <Class TestPerformanceMonitoring>
          Test performance monitoring functionality.
          <Function test_timing_operations>
            Test operation timing functionality.
          <Function test_cache_efficiency_calculation>
            Test cache efficiency calculation.
        <Class TestEndToEndPerformance>
          End-to-end performance tests.
          <Function test_api_response_times>
            Test that API responses are within acceptable time limits.
          <Coroutine test_concurrent_requests>
            Test handling of concurrent requests.
        <Class TestErrorRecovery>
          Test error recovery and fallback mechanisms.
          <Function test_retry_mechanism>
            Test retry mechanism with exponential backoff.
          <Function test_fallback_behavior>
            Test fallback behavior when primary systems fail.
    <Module test_optimization.py>
      Tests for optimization module - Task A2.8: Comprehensive testing.

      This module tests the threshold optimization functionality including
      adaptive thresholding, environmental condition handling, and real-time optimization.
      <Class TestThresholdOptimizer>
        Test the ThresholdOptimizer class.
        <Function test_load_validation_results>
          Test loading validation results from JSON file.
        <Function test_analyze_detection_rates>
          Test detection rate analysis.
        <Function test_calculate_optimal_thresholds_over_detection>
          Test threshold calculation for over-detection scenario.
        <Function test_create_adaptive_config_kelp_farm>
          Test adaptive configuration for kelp farm sites.
        <Function test_create_adaptive_config_open_ocean>
          Test adaptive configuration for open ocean sites.
        <Function test_create_adaptive_config_high_cloud_cover>
          Test adaptive configuration adjustment for high cloud cover.
        <Function test_create_adaptive_config_turbidity_effects>
          Test adaptive configuration adjustment for different turbidity levels.
        <Function test_optimize_for_real_time>
          Test real-time optimization configuration.
        <Function test_generate_recommendations_critical>
          Test recommendation generation for critical over-detection.
        <Function test_generate_recommendations_good_accuracy>
          Test recommendation generation for good accuracy.
        <Function test_save_optimization_results>
          Test saving optimization results to JSON file.
        <Function test_run_comprehensive_optimization>
          Test comprehensive optimization workflow.
      <Class TestOptimizationUtilityFunctions>
        Test utility functions for optimization.
        <Function test_optimize_detection_pipeline>
          Test main optimization pipeline function.
        <Function test_get_optimized_config_for_site>
          Test getting optimized configuration for specific site.
      <Class TestOptimizationEdgeCases>
        Test edge cases and error handling in optimization.
        <Function test_empty_validation_results>
          Test handling of empty validation results.
        <Function test_under_detection_scenario>
          Test optimization for under-detection scenario.
        <Function test_invalid_site_type>
          Test handling of invalid site type.
        <Function test_missing_environmental_conditions>
          Test handling of missing environmental condition parameters.
        <Function test_extreme_processing_time_target>
          Test real-time optimization with extreme processing time targets.
      <Class TestOptimizationPerformance>
        Test performance aspects of optimization.
        <Function test_optimization_performance_benchmarks>
          Test that optimization completes within reasonable time.
        <Function test_memory_efficiency>
          Test memory efficiency of optimization operations.
      <Class TestOptimizationIntegration>
        Integration tests for optimization with real components.
        <Function test_integration_with_validation_pipeline>
          Test optimization integration with validation pipeline.
        <Function test_optimization_scenario_validation>
          Test that optimized scenarios produce valid configurations.
    <Package unit>
      <Module test_analytics_framework.py>
        Unit tests for Analytics Framework

        Tests for:
        - AnalyticsFramework core functionality
        - AnalysisRequest and AnalysisResult classes
        - MetricCalculator performance metrics
        - TrendAnalyzer temporal analysis
        - PerformanceMetrics tracking
        - Stakeholder report generation
        <UnitTestCase TestAnalysisRequest>
          Test AnalysisRequest data class.
          <TestCaseFunction test_empty_analysis_types>
            Test empty analysis types raise ValueError.
          <TestCaseFunction test_invalid_coordinates>
            Test invalid coordinates raise ValueError.
          <TestCaseFunction test_invalid_time_range>
            Test invalid time range raises ValueError.
          <TestCaseFunction test_valid_analysis_request>
            Test creation of valid analysis request.
        <UnitTestCase TestAnalysisResult>
          Test AnalysisResult data class.
          <TestCaseFunction test_analysis_result_creation>
            Test creation of AnalysisResult.
          <TestCaseFunction test_extract_key_findings>
            Test _extract_key_findings method.
          <TestCaseFunction test_get_summary>
            Test get_summary method.
        <UnitTestCase TestMetricCalculator>
          Test MetricCalculator class.
          <TestCaseFunction test_calculate_composite_score>
            Test composite score calculation.
          <TestCaseFunction test_calculate_composite_score_clipping>
            Test composite score calculation with out-of-range values.
          <TestCaseFunction test_calculate_detection_metrics>
            Test detection metrics calculation.
          <TestCaseFunction test_calculate_detection_metrics_edge_cases>
            Test detection metrics with edge cases.
          <TestCaseFunction test_calculate_temporal_metrics>
            Test temporal metrics calculation.
          <TestCaseFunction test_calculate_temporal_metrics_insufficient_data>
            Test temporal metrics with insufficient data.
        <UnitTestCase TestTrendAnalyzer>
          Test TrendAnalyzer class.
          <TestCaseFunction test_analyze_kelp_trends_insufficient_data>
            Test trend analysis with insufficient data.
          <TestCaseFunction test_analyze_kelp_trends_linear>
            Test linear trend analysis.
          <TestCaseFunction test_analyze_kelp_trends_polynomial>
            Test polynomial trend analysis.
          <TestCaseFunction test_assess_trend_risk>
            Test risk assessment from trend analysis.
          <TestCaseFunction test_detect_change_points>
            Test change point detection.
          <TestCaseFunction test_generate_risk_recommendations>
            Test risk recommendation generation.
        <UnitTestCase TestPerformanceMetrics>
          Test PerformanceMetrics class.
          <TestCaseFunction test_check_targets>
            Test target checking logic.
          <TestCaseFunction test_get_performance_summary>
            Test performance summary generation.
          <TestCaseFunction test_get_performance_summary_no_data>
            Test performance summary with no data.
          <TestCaseFunction test_record_performance>
            Test performance recording.
        <UnitTestCase TestAnalyticsFramework>
          Test main AnalyticsFramework class.
          <TestCaseFunction test_calculate_integrated_metrics>
            Test integrated metrics calculation.
          <TestCaseFunction test_execute_analysis>
            Test analysis execution.
          <TestCaseFunction test_execute_analysis_multiple_types>
            Test analysis execution with multiple analysis types.
          <TestCaseFunction test_execute_analysis_single_type>
            Test analysis execution with single analysis type.
          <TestCaseFunction test_framework_initialization>
            Test framework initialization.
          <TestCaseFunction test_get_system_health>
            Test system health assessment.
          <TestCaseFunction test_integrate_cross_analysis>
            Test cross-analysis integration.
          <TestCaseFunction test_mock_analysis_methods>
            Test mock analysis methods return correct structure.
        <UnitTestCase TestFactoryFunctions>
          Test factory functions for easy usage.
          <TestCaseFunction test_create_analysis_request>
            Test create_analysis_request factory function.
          <TestCaseFunction test_create_analysis_request_invalid_type>
            Test create_analysis_request with invalid analysis type.
          <TestCaseFunction test_quick_analysis>
            Test quick_analysis factory function.
          <TestCaseFunction test_quick_analysis_comprehensive>
            Test quick_analysis with comprehensive analysis.
        <UnitTestCase TestStakeholderReports>
          Test stakeholder report generation.
          <TestCaseFunction test_create_stakeholder_report_factory>
            Test stakeholder report factory function.
          <TestCaseFunction test_create_stakeholder_report_invalid_type>
            Test stakeholder report factory with invalid type.
          <TestCaseFunction test_first_nations_report_creation>
            Test First Nations report creation.
          <TestCaseFunction test_management_report_creation>
            Test management report creation.
          <TestCaseFunction test_report_key_messages>
            Test key message extraction for different stakeholder types.
          <TestCaseFunction test_scientific_report_creation>
            Test scientific report creation.
      <Module test_api.py>
        Tests for API module.
        <Function test_health_endpoint>
          Test health endpoint with sync client.
        <Function test_readiness_endpoint>
          Test readiness endpoint.
        <Function test_root_endpoint>
          Test that root endpoint returns web interface or API info.
        <Function test_run_analysis_endpoint>
          Test the /api/run endpoint with valid request.
        <Function test_run_analysis_endpoint_invalid_request>
          Test the /api/run endpoint with invalid request.
        <Function test_run_analysis_endpoint_invalid_coordinates>
          Test the /api/run endpoint with invalid coordinates.
      <Module test_cli.py>
        Tests for CLI module.
        <Function test_cli_help>
          Test CLI help command.
        <Function test_version_command>
          Test version command.
        <Function test_config_command>
          Test config command.
        <Function test_analyze_command_invalid_coordinates>
          Test analyze command with invalid coordinates.
        <Function test_serve_command_help>
          Test serve command help.
      <Module test_enhanced_metrics.py>
        Tests for Enhanced Validation Metrics - Task ML1
        Tests RMSE, MAE, R▓ accuracy metrics for biomass and carbon validation.
        <Class TestEnhancedValidationMetrics>
          Test suite for enhanced validation metrics functionality.
          <Function test_calculate_biomass_accuracy_metrics_basic>
            Test basic RMSE, MAE, R▓ calculation for biomass.
          <Function test_calculate_carbon_accuracy_metrics_basic>
            Test basic RMSE, MAE, R▓ calculation for carbon.
          <Function test_empty_arrays_handling>
            Test handling of empty input arrays.
          <Function test_nan_handling>
            Test handling of NaN values in input data.
          <Function test_mismatched_array_lengths>
            Test handling of mismatched array lengths.
          <Function test_validation_coordinates_constants>
            Test that validation coordinates are properly defined.
          <Function test_species_carbon_ratios>
            Test species-specific carbon content ratios.
          <Function test_validate_model_predictions_against_real_data>
            Test comprehensive validation against multiple sites.
          <Function test_generate_validation_summary>
            Test generation of validation summary across all coordinates.
          <Function test_prediction_intervals_calculation>
            Test uncertainty quantification with prediction intervals.
          <Function test_species_specific_metrics_calculation>
            Test species-specific performance metrics.
        <Class TestFactoryFunctions>
          Test factory functions for enhanced metrics.
          <Function test_create_enhanced_validation_metrics>
            Test factory function for creating metrics calculator.
          <Function test_validate_four_coordinate_sites_function>
            Test the convenience function for validating four coordinates.
          <Function test_calculate_validation_summary_function>
            Test the convenience function for calculating validation summary.
        <Class TestEdgeCases>
          Test edge cases and error handling.
          <Function test_all_zero_observations>
            Test handling when all observed values are zero.
          <Function test_identical_predictions_and_observations>
            Test perfect predictions (identical arrays).
          <Function test_single_data_point>
            Test handling of single data point.
          <Function test_validation_with_empty_results>
            Test validation summary generation with empty results.
          <Function test_temporal_metrics_with_invalid_dates>
            Test temporal metrics with invalid date information.
      <Module test_fetch.py>
        Tests for fetch module.
        <Function test_fetch_sentinel_tiles_with_mock_data>
          Test fetch_sentinel_tiles returns mock data when no credentials.
        <Function test_fetch_sentinel_tiles_invalid_coordinates>
          Test fetch_sentinel_tiles with invalid coordinates.
        <Function test_fetch_sentinel_tiles_invalid_dates>
          Test fetch_sentinel_tiles with invalid date formats.
      <Module test_field_survey_integration.py>
        Unit tests for Field Survey Data Integration - Task C2.4

        Tests field data ingestion, species validation analysis, and reporting functionality.
        <Class TestFieldSurveyRecord>
          Test FieldSurveyRecord dataclass.
          <Function test_field_survey_record_creation>
            Test creating a field survey record.
          <Function test_field_survey_record_defaults>
            Test field survey record with default values.
        <Class TestSpeciesValidationMetrics>
          Test SpeciesValidationMetrics dataclass.
          <Function test_validation_metrics_creation>
            Test creating validation metrics.
        <Class TestFieldDataIngestor>
          Test FieldDataIngestor class.
          <Function test_ingestor_initialization>
            Test ingestor initialization.
          <Function test_parse_species_list_from_string>
            Test parsing species list from string.
          <Function test_parse_species_list_from_list>
            Test parsing species list from list.
          <Function test_parse_empty_species_list>
            Test parsing empty species list.
          <Function test_convert_dict_to_record_success>
            Test successful conversion of dict to record.
          <Function test_convert_dict_to_record_with_missing_fields>
            Test conversion with missing optional fields.
          <Function test_convert_dict_to_record_with_invalid_data>
            Test conversion with invalid data.
          <Function test_ingest_csv_survey_success>
            Test successful CSV ingestion.
          <Function test_ingest_csv_survey_error>
            Test CSV ingestion with error.
          <Function test_ingest_json_survey_success>
            Test successful JSON ingestion.
          <Function test_ingest_json_survey_error>
            Test JSON ingestion with error.
        <Class TestSpeciesValidationAnalyzer>
          Test SpeciesValidationAnalyzer class.
          <Function test_analyzer_initialization>
            Test analyzer initialization.
          <Function test_create_empty_metrics>
            Test creating empty metrics.
          <Function test_calculate_species_classification_metrics>
            Test species classification metrics calculation.
          <Function test_calculate_biomass_estimation_metrics>
            Test biomass estimation metrics calculation.
          <Function test_compare_predictions_to_field_data_empty>
            Test comparison with empty data.
          <Function test_compare_predictions_to_field_data_success>
            Test successful comparison of predictions to field data.
        <Class TestFieldSurveyReporter>
          Test FieldSurveyReporter class.
          <Function test_reporter_initialization>
            Test reporter initialization.
          <Function test_assess_data_quality_excellent>
            Test data quality assessment - excellent.
          <Function test_assess_data_quality_limited>
            Test data quality assessment - limited.
          <Function test_assess_biomass_performance_excellent>
            Test biomass performance assessment - excellent.
          <Function test_assess_biomass_performance_poor>
            Test biomass performance assessment - poor.
          <Function test_generate_recommendations_good_performance>
            Test recommendations for good performance.
          <Function test_generate_recommendations_poor_performance>
            Test recommendations for poor performance.
          <Function test_generate_field_survey_summary_empty>
            Test field survey summary with empty data.
          <Function test_generate_field_survey_summary_with_data>
            Test field survey summary with data.
          <Function test_generate_comprehensive_report>
            Test comprehensive report generation.
        <Class TestFactoryFunctions>
          Test factory functions.
          <Function test_create_field_data_ingestor>
            Test field data ingestor factory function.
          <Function test_create_validation_analyzer>
            Test validation analyzer factory function.
          <Function test_create_survey_reporter>
            Test survey reporter factory function.
        <Class TestIntegrationScenarios>
          Test integration scenarios combining multiple components.
          <Function test_end_to_end_field_survey_processing>
            Test end-to-end field survey data processing.
          <Function test_mixed_species_validation_scenario>
            Test validation scenario with mixed species.
          <Function test_performance_degradation_scenario>
            Test scenario with performance degradation patterns.
      <Module test_historical_baseline_analysis.py>
        Unit tests for Historical Baseline Analysis module.

        This module tests the comprehensive historical baseline analysis capabilities,
        including historical data digitization, change detection algorithms, and temporal
        trend analysis following UVic methodology.
        <Class TestHistoricalSite>
          Test HistoricalSite data structure.
          <Function test_valid_site_creation>
            Test creating a valid historical site.
          <Function test_invalid_latitude>
            Test validation of latitude bounds.
          <Function test_invalid_longitude>
            Test validation of longitude bounds.
          <Function test_invalid_historical_period>
            Test validation of historical period.
          <Function test_invalid_quality>
            Test validation of digitization quality.
        <Class TestHistoricalDataset>
          Test HistoricalDataset data structure.
          <Function test_valid_dataset_creation>
            Test creating a valid historical dataset.
          <Function test_empty_temporal_data>
            Test validation of empty temporal data.
          <Function test_negative_baseline_extent>
            Test validation of negative baseline extent.
        <Class TestChangeDetectionAnalyzer>
          Test ChangeDetectionAnalyzer functionality.
          <Function test_detect_significant_changes_mann_kendall>
            Test change detection using Mann-Kendall test.
          <Function test_detect_significant_changes_t_test>
            Test change detection using t-test.
          <Function test_detect_significant_changes_wilcoxon>
            Test change detection using Wilcoxon test.
          <Function test_invalid_method>
            Test error handling for invalid method.
          <Function test_mann_kendall_test_insufficient_data>
            Test Mann-Kendall test with insufficient data.
          <Function test_mann_kendall_test_increasing_trend>
            Test Mann-Kendall test with increasing trend.
          <Function test_mann_kendall_test_decreasing_trend>
            Test Mann-Kendall test with decreasing trend.
          <Function test_analyze_change_patterns>
            Test comprehensive change pattern analysis.
        <Class TestTemporalTrendAnalyzer>
          Test TemporalTrendAnalyzer functionality.
          <Function test_analyze_temporal_trends>
            Test comprehensive temporal trend analysis.
          <Function test_analyze_temporal_trends_no_forecast>
            Test temporal trend analysis without forecast.
          <Function test_calculate_trend_metrics_insufficient_data>
            Test trend metrics with insufficient data.
          <Function test_calculate_trend_metrics_sufficient_data>
            Test trend metrics with sufficient data.
          <Function test_analyze_seasonal_patterns_insufficient_data>
            Test seasonal pattern analysis with insufficient data.
          <Function test_detect_cyclical_patterns_insufficient_data>
            Test cyclical pattern detection with insufficient data.
          <Function test_detect_cyclical_patterns_sufficient_data>
            Test cyclical pattern detection with sufficient data.
          <Function test_generate_forecast_insufficient_data>
            Test forecast generation with insufficient data.
          <Function test_generate_forecast_sufficient_data>
            Test forecast generation with sufficient data.
          <Function test_assess_trend_risks_high_risk>
            Test risk assessment for high-risk trends.
          <Function test_assess_trend_risks_low_risk>
            Test risk assessment for low-risk trends.
        <Class TestHistoricalBaselineAnalysis>
          Test main HistoricalBaselineAnalysis framework.
          <Function test_create_historical_site>
            Test creating and registering a historical site.
          <Function test_digitize_historical_data>
            Test historical data digitization.
          <Function test_digitize_historical_data_site_not_found>
            Test error handling for missing site.
          <Function test_apply_quality_control>
            Test quality control procedures.
          <Function test_calculate_data_quality_metrics>
            Test data quality metrics calculation.
          <Function test_perform_comprehensive_analysis>
            Test comprehensive analysis workflow.
          <Function test_perform_comprehensive_analysis_missing_dataset>
            Test error handling for missing dataset.
          <Function test_generate_comparison_report>
            Test comparative analysis report generation.
          <Function test_generate_comparison_report_missing_sites>
            Test error handling for missing sites in comparison.
          <Function test_generate_comparison_report_json_format>
            Test JSON format output for comparison report.
          <Function test_generate_comparison_report_markdown_format>
            Test Markdown format output for comparison report.
          <Function test_export_results>
            Test exporting results to file.
          <Function test_export_results_with_visualizations>
            Test exporting results with visualizations.
          <Function test_export_results_missing_site>
            Test error handling for missing site in export.
        <Class TestFactoryFunctions>
          Test factory functions for creating historical sites and datasets.
          <Function test_create_uvic_historical_sites>
            Test creation of UVic historical sites.
          <Function test_create_sample_historical_dataset>
            Test creation of sample historical dataset.
        <Class TestIntegrationScenarios>
          Test integration scenarios and edge cases.
          <Function test_complete_workflow>
            Test complete analysis workflow from start to finish.
          <Function test_error_recovery>
            Test error recovery and graceful degradation.
          <Function test_minimal_data_analysis>
            Test analysis with minimal data.
      <Module test_imagery.py>
        Tests for satellite imagery visualization functionality.
        <Class TestImageryUtils>
          Test utility functions for imagery processing.
          <Function test_normalize_band>
            Test band normalization.
          <Function test_normalize_band_with_nan>
            Test band normalization with NaN values.
          <Function test_normalize_to_0_1>
            Test data normalization to 0-1 range.
          <Function test_apply_colormap>
            Test colormap application.
          <Function test_array_to_image_rgb>
            Test converting RGB array to PIL Image.
          <Function test_array_to_image_rgba>
            Test converting RGBA array to PIL Image.
          <Function test_array_to_image_grayscale>
            Test converting grayscale array to PIL Image.
          <Function test_get_image_bounds>
            Test extracting geographical bounds.
          <Function test_create_rgba_overlay>
            Test creating RGBA overlay from mask.
          <Function test_enhance_contrast>
            Test contrast enhancement.
          <Function test_calculate_histogram_stretch>
            Test histogram stretch calculation.
        <Class TestImageGenerators>
          Test image generation functions.
          <Function test_generate_rgb_composite_red_only>
            Test RGB composite with only red band.
          <Function test_generate_rgb_composite_missing_band>
            Test RGB composite with missing band.
          <Function test_generate_false_color_composite>
            Test false-color composite generation.
          <Function test_generate_false_color_missing_bands>
            Test false-color composite with missing bands.
          <Function test_generate_spectral_visualization>
            Test spectral index visualization.
        <Class TestOverlayGenerators>
          Test overlay generation functions.
          <Function test_generate_kelp_mask_overlay>
            Test kelp mask overlay generation.
          <Function test_generate_water_mask_overlay>
            Test water mask overlay generation.
          <Function test_generate_cloud_mask_overlay>
            Test cloud mask overlay generation.
          <Function test_generate_mask_overlay_missing_data>
            Test mask overlay with missing data.
          <Function test_generate_biomass_heatmap>
            Test biomass heatmap generation.
          <Function test_generate_biomass_heatmap_no_data>
            Test biomass heatmap with no valid data.
          <Function test_generate_biomass_heatmap_custom_scaling>
            Test biomass heatmap with custom scaling.
        <Class TestImageryIntegration>
          Integration tests for imagery functionality.
          <Function test_full_imagery_pipeline>
            Test complete imagery generation pipeline.
          <Function test_imagery_with_real_satellite_data_structure>
            Test imagery generation with realistic satellite data structure.
          <Function test_memory_efficiency>
            Test memory efficiency with larger datasets.
          <Function test_error_handling>
            Test error handling in imagery generation.
          <Function test_image_quality_metrics>
            Test that generated images meet quality standards.
      <Module test_imagery_api.py>
        Tests for satellite imagery API endpoints.
        <Class TestImageryAPI>
          Test imagery API endpoints.
          <Function test_imagery_health_check>
            Test imagery service health check.
          <Function test_get_nonexistent_analysis>
            Test accessing non-existent analysis.
      <Module test_indices.py>
        Tests for indices module.
        <Function test_fai_positive_when_nir_gt_re>
          Test that FAI is positive when NIR > red edge.
        <Function test_calculate_indices_from_dataset>
          Test calculation of indices from xarray dataset.
      <Module test_mask.py>
        Tests for mask module.
        <Function test_apply_mask_basic>
          Test basic masking functionality.
        <Function test_apply_mask_with_custom_config>
          Test masking with custom configuration.
        <Function test_create_cloud_mask>
          Test cloud mask creation.
        <Function test_create_water_mask>
          Test water mask creation using NDWI.
        <Function test_create_kelp_detection_mask>
          Test kelp detection mask creation.
        <Function test_calculate_fai>
          Test Floating Algae Index calculation.
        <Function test_calculate_red_edge_ndvi>
          Test Red Edge NDVI calculation.
        <Function test_remove_small_objects>
          Test small object removal from binary mask.
        <Function test_get_mask_statistics>
          Test mask statistics calculation.
        <Function test_cloud_mask_without_cloud_data>
          Test cloud mask creation when no cloud data is available.
        <Function test_cloud_shadow_detection>
          Test cloud shadow detection functionality.
        <Function test_mask_integration>
          Test integration of all masking components.
        <Function test_edge_cases>
          Test edge cases and error handling.
        <Function test_fai_calculation_edge_values>
          Test FAI calculation with edge values.
        <Function test_mask_consistency>
          Test that masks are consistent with each other.
      <Module test_model.py>
        Tests for biomass prediction model functionality.
        <Function test_kelp_biomass_model_initialization>
          Test KelpBiomassModel initialization.
        <Function test_extract_features>
          Test feature extraction from satellite dataset.
        <Function test_spectral_indices_calculation>
          Test spectral indices calculation.
        <Function test_kelp_patch_analysis>
          Test kelp patch analysis.
        <Function test_spatial_features_calculation>
          Test spatial features calculation.
        <Function test_predict_with_synthetic_model>
          Test biomass prediction using synthetic model.
        <Function test_generate_training_data>
          Test synthetic training data generation.
        <Function test_model_training>
          Test Random Forest model training.
        <Function test_trained_model_prediction>
          Test prediction with a trained model.
        <Function test_predict_biomass_function>
          Test the main predict_biomass function.
        <Function test_model_save_load>
          Test model saving and loading.
        <Function test_feature_consistency>
          Test that feature extraction is consistent across different datasets.
        <Function test_model_with_missing_bands>
          Test model behavior with missing spectral bands.
        <Function test_edge_case_empty_kelp_mask>
          Test model with empty kelp mask.
        <Function test_training_data_quality>
          Test quality and consistency of generated training data.
        <Function test_model_robustness>
          Test model robustness with extreme values.
        <Function test_empty_array_handling>
          Test that empty arrays are handled without RuntimeWarnings.
        <Function test_all_nan_array_handling>
          Test handling of arrays with all NaN values.
        <Function test_model_statistical_operations_safe>
          Test that model statistical operations don't generate RuntimeWarnings.
      <Module test_models.py>
        Tests for API models and validation.
        <Class TestCoordinateModel>
          Test coordinate validation.
          <Function test_valid_coordinates>
            Test valid coordinate creation.
          <Function test_latitude_validation>
            Test latitude boundary validation.
          <Function test_longitude_validation>
            Test longitude boundary validation.
          <Function test_string_coordinates>
            Test that string coordinates are rejected.
        <Class TestAnalysisRequest>
          Test analysis request validation.
          <Function test_valid_request>
            Test valid analysis request creation.
          <Function test_date_format_validation>
            Test date format validation.
          <Function test_date_order_validation>
            Test that end_date must be after start_date.
        <Class TestAnalysisResponse>
          Test analysis response model.
          <Function test_valid_response_creation>
            Test creating a valid analysis response.
          <Function test_status_enum>
            Test analysis status enum values.
        <Class TestHealthResponse>
          Test health response model.
          <Function test_health_response_creation>
            Test creating a health response.
        <Class TestReadinessResponse>
          Test readiness response model.
          <Function test_readiness_response_creation>
            Test creating a readiness response.
        <Class TestMaskStatisticsModel>
          Test mask statistics model.
          <Function test_coverage_validation>
            Test coverage ratio validation.
          <Function test_pixel_count_validation>
            Test pixel count validation.
        <Class TestErrorResponse>
          Test error response model.
          <Function test_error_response_creation>
            Test creating an error response.
        <Class TestModelSerialization>
          Test model serialization and deserialization.
          <Function test_analysis_request_json>
            Test analysis request JSON serialization.
          <Function test_analysis_response_json>
            Test analysis response JSON serialization.
      <Module test_morphology_detector.py>
        Test morphological detection functionality.
        <Class TestMorphologyType>
          Test MorphologyType enumeration.
          <Function test_morphology_types>
            Test that all expected morphology types are available.
        <Class TestMorphologicalFeature>
          Test MorphologicalFeature dataclass.
          <Function test_morphological_feature_creation>
            Test creating a morphological feature.
        <Class TestMorphologyDetectionResult>
          Test MorphologyDetectionResult dataclass.
          <Function test_detection_result_creation>
            Test creating a morphology detection result.
        <Class TestPneumatocystDetector>
          Test PneumatocystDetector class.
          <Function test_pneumatocyst_detector_init>
            Test pneumatocyst detector initialization.
          <Function test_detect_pneumatocysts_basic>
            Test basic pneumatocyst detection.
          <Function test_detect_pneumatocysts_empty_mask>
            Test pneumatocyst detection with empty mask.
          <Function test_circularity_calculation>
            Test circularity calculation method.
          <Function test_confidence_calculation>
            Test pneumatocyst confidence calculation.
        <Class TestBladeFromdDetector>
          Test BladeFromdDetector class.
          <Function test_blade_frond_detector_init>
            Test blade/frond detector initialization.
          <Function test_detect_blades_and_fronds_basic>
            Test basic blade/frond detection.
          <Function test_classify_blade_or_frond>
            Test blade vs frond classification logic.
          <Function test_boundary_complexity_calculation>
            Test boundary complexity calculation.
        <Class TestMorphologyDetector>
          Test main MorphologyDetector class.
          <Function test_morphology_detector_init>
            Test morphology detector initialization.
          <Function test_analyze_morphology_basic>
            Test basic morphological analysis.
          <Function test_analyze_morphology_empty_mask>
            Test morphological analysis with empty mask.
          <Function test_calculate_overall_confidence>
            Test overall confidence calculation.
          <Function test_calculate_species_indicators>
            Test species indicator calculation.
          <Function test_analyze_morphology_error_handling>
            Test error handling in morphological analysis.
        <Class TestCreateMorphologyDetector>
          Test factory function.
          <Function test_create_morphology_detector>
            Test creating morphology detector through factory function.
        <Class TestIntegrationWithSpeciesClassifier>
          Test integration with species classification system.
          <Function test_morphology_integration>
            Test that morphology detector integrates properly with species classifier.
          <Function test_morphology_features_in_classification>
            Test that morphological features are properly extracted for classification.
      <Module test_phase3_data_acquisition.py>
        Tests for Phase 3 Real Data Acquisition System.

        This module tests the Phase 3 data acquisition framework for Task C1.5
        real-world validation capabilities.
        <Class TestValidationSite>
          Test the ValidationSite dataclass.
          <Function test_validation_site_creation>
            Test creating a validation site.
        <Class TestSatelliteScene>
          Test the SatelliteScene dataclass.
          <Function test_satellite_scene_creation>
            Test creating a satellite scene.
        <Class TestPhase3DataAcquisition>
          Test the Phase3DataAcquisition class.
          <Function test_initialization>
            Test acquisition system initialization.
          <Function test_get_validation_sites_no_filter>
            Test getting all validation sites without filters.
          <Function test_get_validation_sites_region_filter>
            Test getting validation sites filtered by region.
          <Function test_get_validation_sites_species_filter>
            Test getting validation sites filtered by species.
          <Function test_get_validation_sites_confidence_filter>
            Test getting validation sites filtered by confidence.
          <Function test_create_synthetic_sentinel2_scenes>
            Test creating synthetic Sentinel-2 scenes.
          <Function test_create_synthetic_scenes_invalid_site>
            Test creating synthetic scenes for invalid site.
          <Function test_cloud_coverage_simulation>
            Test cloud coverage simulation for different regions.
          <Function test_data_quality_determination>
            Test data quality determination from cloud coverage.
          <Function test_season_phase_determination>
            Test season phase determination.
          <Function test_create_validation_dataset>
            Test creating a complete validation dataset.
          <Function test_quality_metrics_calculation>
            Test quality metrics calculation.
          <Function test_create_benchmark_suite>
            Test creating benchmark suite.
          <Function test_save_and_load_validation_dataset>
            Test saving and loading validation datasets.
          <Function test_get_site_summary>
            Test getting site summary.
          <Function test_generate_quality_report>
            Test generating quality report.
        <Class TestFactoryFunctions>
          Test factory functions and convenience APIs.
          <Function test_create_phase3_data_acquisition>
            Test factory function.
          <Function test_get_validation_sites_function>
            Test high-level get_validation_sites function.
          <Function test_create_benchmark_dataset_function>
            Test high-level create_benchmark_dataset function.
          <Function test_create_full_benchmark_suite_function>
            Test high-level create_full_benchmark_suite function.
        <Class TestIntegrationScenarios>
          Test realistic integration scenarios.
          <Function test_full_validation_workflow>
            Test complete validation workflow.
          <Function test_multi_region_diversity>
            Test diversity across multiple regions.
          <Function test_seasonal_coverage_analysis>
            Test seasonal coverage across sites.
          <Function test_quality_filtering_workflow>
            Test quality filtering and assessment workflow.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_scenes_quality_metrics>
            Test quality metrics with empty scenes list.
          <Function test_single_scene_dataset>
            Test dataset with single scene.
          <Function test_cross_year_kelp_season>
            Test handling kelp seasons that cross year boundaries.
          <Function test_southern_hemisphere_seasons>
            Test Southern Hemisphere seasonal patterns.
          <Function test_invalid_site_operations>
            Test operations with invalid site IDs.
          <Function test_load_nonexistent_file>
            Test loading dataset from nonexistent file.
          <Function test_benchmark_suite_with_invalid_sites>
            Test benchmark suite creation with some invalid sites.
      <Module test_real_data_acquisition.py>
        Tests for Real Satellite Data Acquisition System.

        This module tests the real data acquisition framework for validating kelp detection
        algorithms against actual satellite imagery and ground truth data.
        <Class TestValidationSite>
          Test the ValidationSite dataclass.
          <Function test_validation_site_creation>
            Test creating a validation site.
        <Class TestSatelliteScene>
          Test the SatelliteScene dataclass.
          <Function test_satellite_scene_creation>
            Test creating a satellite scene.
        <Class TestGroundTruthData>
          Test the GroundTruthData dataclass.
          <Function test_ground_truth_data_creation>
            Test creating ground truth data.
        <Class TestValidationDataset>
          Test the ValidationDataset dataclass.
          <Function test_validation_dataset_creation>
            Test creating a validation dataset.
        <Class TestRealDataAcquisition>
          Test the RealDataAcquisition class.
          <Function test_initialization>
            Test acquisition system initialization.
          <Function test_validation_sites_initialization>
            Test validation sites database initialization.
          <Function test_get_validation_sites_no_filter>
            Test getting all validation sites without filters.
          <Function test_get_validation_sites_region_filter>
            Test getting validation sites filtered by region.
          <Function test_get_validation_sites_species_filter>
            Test getting validation sites filtered by species.
          <Function test_get_validation_sites_combined_filter>
            Test getting validation sites with combined region and species filters.
          <Function test_create_synthetic_satellite_data>
            Test creating synthetic satellite data.
          <Function test_create_synthetic_satellite_data_date_range>
            Test creating synthetic satellite data with custom date range.
          <Function test_create_synthetic_satellite_data_invalid_site>
            Test creating synthetic data for invalid site.
          <Function test_create_synthetic_ground_truth>
            Test creating synthetic ground truth data.
          <Function test_create_synthetic_ground_truth_seasonal_variation>
            Test that synthetic ground truth shows seasonal variation.
          <Function test_create_synthetic_ground_truth_invalid_site>
            Test creating synthetic ground truth for invalid site.
          <Function test_calculate_dataset_quality_metrics>
            Test calculation of dataset quality metrics.
          <Function test_calculate_dataset_quality_metrics_empty>
            Test quality metrics calculation with empty data.
          <Function test_create_validation_dataset>
            Test creating a complete validation dataset.
          <Function test_create_validation_dataset_invalid_site>
            Test creating validation dataset for invalid site.
          <Function test_save_and_load_validation_dataset>
            Test saving and loading validation datasets.
          <Function test_save_validation_dataset_custom_filename>
            Test saving validation dataset with custom filename.
          <Function test_create_benchmark_suite>
            Test creating a benchmark suite across multiple sites.
          <Function test_create_benchmark_suite_all_sites>
            Test creating benchmark suite for all sites.
          <Function test_create_benchmark_suite_invalid_site>
            Test creating benchmark suite with invalid site.
          <Function test_get_site_summary>
            Test getting site summary statistics.
        <Class TestFactoryFunctions>
          Test factory functions and high-level interfaces.
          <Function test_create_real_data_acquisition>
            Test factory function for creating acquisition system.
          <Function test_get_validation_sites_function>
            Test high-level get_validation_sites function.
          <Function test_create_benchmark_dataset_function>
            Test high-level create_benchmark_dataset function.
        <Class TestIntegrationScenarios>
          Test integration scenarios and realistic workflows.
          <Function test_full_validation_workflow>
            Test complete validation dataset creation and usage workflow.
          <Function test_multi_site_benchmark_creation>
            Test creating benchmarks across multiple diverse sites.
          <Function test_seasonal_validation_scenarios>
            Test validation across different seasonal scenarios.
          <Function test_quality_assessment_workflow>
            Test quality assessment and filtering workflow.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_scenes_list>
            Test handling empty scenes list.
          <Function test_single_scene_dataset>
            Test creating dataset with single scene.
          <Function test_cross_year_kelp_season>
            Test handling kelp seasons that cross year boundaries.
          <Function test_invalid_date_range>
            Test handling invalid date ranges.
          <Function test_load_nonexistent_file>
            Test loading dataset from nonexistent file.
          <Function test_save_to_readonly_directory>
            Test saving dataset to readonly directory.
      <Module test_satellite_optimization.py>
        Unit tests for satellite data optimization module.
        Tests dual-satellite fusion, cloud masking, and carbon market optimization.
        <Class TestSatelliteOptimizationConfig>
          Test SatelliteOptimizationConfig dataclass.
          <Function test_default_config>
            Test default configuration values.
          <Function test_custom_config>
            Test custom configuration values.
        <Class TestProcessingProvenance>
          Test ProcessingProvenance dataclass.
          <Function test_provenance_creation>
            Test processing provenance record creation.
        <Class TestSatelliteDataOptimization>
          Test SatelliteDataOptimization class.
          <Function test_initialization_default_config>
            Test initialization with default configuration.
          <Function test_initialization_custom_config>
            Test initialization with custom configuration.
          <Function test_implement_dual_sentinel_fusion>
            Test dual Sentinel-2A/2B fusion implementation.
          <Function test_create_enhanced_cloud_masking>
            Test enhanced cloud masking implementation.
          <Function test_implement_carbon_market_optimization>
            Test carbon market optimization framework.
        <Class TestFactoryFunctions>
          Test factory functions for easy usage.
          <Function test_create_satellite_optimization_default>
            Test satellite optimization creation with default config.
          <Function test_optimize_dual_satellite_coverage>
            Test dual satellite coverage optimization factory function.
        <Class TestEdgeCases>
          Test edge cases and error handling.
          <Function test_empty_dataset_handling>
            Test handling of empty datasets.
          <Function test_single_time_step_dataset>
            Test handling of dataset with single time step.
          <Function test_missing_spectral_bands>
            Test handling of datasets with missing spectral bands.
          <Function test_nan_values_in_data>
            Test handling of NaN values in satellite data.
          <Function test_extreme_spectral_values>
            Test handling of extreme spectral values.
          <Function test_mismatched_dataset_coordinates>
            Test handling of datasets with mismatched coordinates.
        <Class TestIntegrationScenarios>
          Test integration scenarios and workflows.
          <Function test_complete_optimization_workflow>
            Test complete satellite optimization workflow.
          <Function test_performance_with_realistic_data_size>
            Test performance with realistic data sizes.
          <Function test_multi_temporal_fusion_scenario>
            Test multi-temporal fusion scenario.
          <Function test_error_recovery_and_robustness>
            Test error recovery and system robustness.
      <Module test_simple_config.py>
        Tests for simplified configuration system.
        <Class TestSimpleConfig>
          Test simplified configuration.
          <Function test_default_configuration>
            Test default configuration values.
          <Function test_environment_variables>
            Test configuration from environment variables.
          <Function test_port_validation>
            Test port validation.
          <Function test_cloud_cover_validation>
            Test cloud cover validation.
          <Function test_timeout_validation>
            Test timeout validation.
          <Function test_get_simple_config_caching>
            Test that get_simple_config caches results.
          <Function test_get_config_for_environment>
            Test getting configuration for specific environment.
          <Function test_cors_settings>
            Test CORS configuration.
          <Function test_path_settings>
            Test path configuration.
      <Module test_skema_biomass_integration.py>
        Unit tests for SKEMA/UVic biomass integration module.
        Tests biomass validation, species-specific protocols, and ground truth integration.
        <Class TestSKEMAIntegrationConfig>
          Test SKEMAIntegrationConfig dataclass.
          <Function test_default_config>
            Test default configuration values.
          <Function test_custom_config>
            Test custom configuration values.
        <Class TestBiomassValidationSite>
          Test BiomassValidationSite dataclass.
          <Function test_site_creation>
            Test biomass validation site creation.
        <Class TestBiomassGroundTruth>
          Test BiomassGroundTruth dataclass.
          <Function test_ground_truth_creation>
            Test biomass ground truth measurement creation.
        <Class TestSKEMABiomassDatasetIntegrator>
          Test SKEMABiomassDatasetIntegrator class.
          <Function test_initialization_default_config>
            Test initialization with default configuration.
          <Function test_initialization_custom_config>
            Test initialization with custom configuration.
          <Function test_integrate_four_validation_sites_biomass_data>
            Test integration of four validation sites biomass data.
          <Function test_enhance_existing_skema_integration>
            Test enhancement of existing SKEMA integration.
          <Function test_load_uvic_saanich_inlet_data>
            Test loading UVic Saanich Inlet data.
          <Function test_integrate_species_specific_biomass_validation>
            Test species-specific biomass validation integration.
          <Function test_create_carbon_quantification_validation>
            Test carbon quantification validation creation.
        <Class TestFactoryFunctions>
          Test factory functions for easy usage.
          <Function test_create_skema_biomass_integrator_default>
            Test SKEMA biomass integrator creation with default config.
          <Function test_create_skema_biomass_integrator_custom_config>
            Test SKEMA biomass integrator creation with custom config.
        <Class TestEdgeCases>
          Test edge cases and error handling.
          <Function test_empty_validation_sites>
            Test handling of empty validation sites.
          <Function test_missing_biomass_data>
            Test handling of missing biomass data.
          <Function test_invalid_coordinates>
            Test handling of invalid coordinates.
        <Class TestIntegrationScenarios>
          Test integration scenarios and workflows.
          <Function test_complete_integration_workflow>
            Test complete SKEMA biomass integration workflow.
      <Module test_skema_integration.py>
        Tests for SKEMA integration functionality.
        <Function test_water_anomaly_filter>
          Test Water Anomaly Filter functionality.
        <Function test_waf_sunglint_detection>
          Test that WAF correctly detects sunglint areas.
        <Function test_waf_quality_metrics>
          Test WAF quality metrics calculation.
        <Function test_spectral_derivatives_calculation>
          Test spectral derivatives calculation.
        <Function test_derivative_kelp_detection>
          Test derivative-based kelp detection.
        <Function test_derivative_detection_with_config>
          Test derivative detection with custom configuration.
        <Function test_derivative_quality_metrics>
          Test derivative quality metrics calculation.
        <Function test_skema_kelp_detection_integration>
          Test integrated SKEMA kelp detection.
        <Function test_skema_detection_combination_methods>
          Test different detection combination methods.
        <Function test_skema_without_waf>
          Test SKEMA detection without Water Anomaly Filter.
        <Function test_skema_derivative_only>
          Test SKEMA detection using only derivative features.
        <Function test_edge_cases_small_dataset>
          Test SKEMA functionality with very small dataset.
        <Function test_missing_bands_handling>
          Test graceful handling of missing spectral bands.
      <Module test_species_classifier.py>
        Test species classification functionality.
        <Class TestKelpSpecies>
          Test KelpSpecies enumeration.
          <Function test_species_enumeration>
            Test that all expected species are available.
        <Class TestSpeciesClassificationResult>
          Test SpeciesClassificationResult dataclass.
          <Function test_result_initialization>
            Test result initialization with required fields.
          <Function test_result_with_biomass>
            Test result with biomass estimation.
        <Class TestSpeciesClassifier>
          Test SpeciesClassifier functionality.
          <Function test_classify_species_basic>
            Test basic species classification.
          <Function test_classify_empty_mask>
            Test classification with empty kelp mask.
          <Function test_nereocystis_indicators>
            Test Nereocystis classification with strong indicators.
          <Function test_macrocystis_indicators>
            Test Macrocystis classification with strong indicators.
          <Function test_mixed_species_indicators>
            Test mixed species classification.
          <Function test_extract_spectral_features>
            Test spectral feature extraction.
          <Function test_extract_morphological_features>
            Test morphological feature extraction.
          <Function test_detect_pneumatocysts>
            Test pneumatocyst detection.
          <Function test_detect_pneumatocysts_none_found>
            Test pneumatocyst detection when none found.
          <Function test_detect_frond_patterns>
            Test frond pattern detection.
          <Function test_biomass_estimation_nereocystis>
            Test biomass estimation for Nereocystis.
          <Function test_biomass_estimation_macrocystis>
            Test biomass estimation for Macrocystis.
          <Function test_biomass_estimation_unknown>
            Test biomass estimation for unknown species.
          <Function test_error_handling>
            Test error handling in classification.
        <Class TestFactoryFunction>
          Test factory function for creating classifiers.
          <Function test_create_species_classifier>
            Test factory function.
        <Class TestIntegration>
          Integration tests for species classification.
          <Function test_full_classification_pipeline>
            Test complete classification pipeline.
        <Function test_enhanced_biomass_estimation>
          Test enhanced biomass estimation with confidence intervals.
        <Function test_enhanced_biomass_estimation_low_confidence>
          Test enhanced biomass estimation with low classification confidence.
        <Function test_enhanced_biomass_estimation_mixed_species>
          Test enhanced biomass estimation for mixed species.
        <Function test_enhanced_biomass_estimation_bounds>
          Test that biomass estimates stay within reasonable bounds.
        <Function test_species_specific_biomass_algorithms>
          Test that different species use different biomass algorithms.
        <Function test_enhanced_classification_result_structure>
          Test that enhanced classification results include biomass estimates.
        <Function test_biomass_estimation_validation_against_literature>
          Test that biomass estimates align with published literature ranges.
      <Module test_standardized_errors.py>
        Tests for standardized error handling.
        <Class TestStandardizedErrors>
          Test standardized error handling.
          <Function test_standardized_error_structure>
            Test that standardized errors have consistent structure.
          <Function test_validation_error>
            Test validation error creation.
          <Function test_not_found_error>
            Test not found error creation.
          <Function test_coordinate_error>
            Test coordinate validation error creation.
          <Function test_date_range_error>
            Test date range validation error creation.
          <Function test_processing_error>
            Test processing error creation.
          <Function test_satellite_data_error>
            Test satellite data error creation.
          <Function test_imagery_error>
            Test imagery generation error creation.
          <Function test_service_unavailable_error>
            Test service unavailable error creation.
          <Function test_unexpected_error_handling>
            Test handling of unexpected errors.
          <Function test_error_without_optional_fields>
            Test error creation without optional fields.
          <Function test_error_inheritance>
            Test that StandardizedError inherits from HTTPException.
        <Class TestErrorCodes>
          Test error code enumeration.
          <Function test_error_code_values>
            Test that error codes have expected string values.
          <Function test_error_code_coverage>
            Test that we have error codes for different HTTP status ranges.
      <Module test_submerged_kelp_detection.py>
        Tests for Submerged Kelp Detection Enhancement.

        This module tests the submerged kelp detection framework including depth-sensitive
        detection, water column modeling, and integrated surface/submerged detection pipelines.
        <Class TestWaterColumnModel>
          Test the WaterColumnModel dataclass.
          <Function test_water_column_model_defaults>
            Test default water column model parameters.
          <Function test_water_column_model_custom>
            Test custom water column model parameters.
        <Class TestSubmergedKelpConfig>
          Test the SubmergedKelpConfig dataclass.
          <Function test_config_defaults>
            Test default configuration parameters.
          <Function test_config_custom>
            Test custom configuration parameters.
        <Class TestDepthDetectionResult>
          Test the DepthDetectionResult dataclass.
          <Function test_depth_detection_result_creation>
            Test creating a depth detection result.
        <Class TestSubmergedKelpDetector>
          Test the SubmergedKelpDetector class.
          <Function test_detector_initialization>
            Test detector initialization with and without config.
          <Function test_calculate_depth_sensitive_indices>
            Test calculation of depth-sensitive spectral indices.
          <Function test_calculate_depth_sensitive_indices_missing_bands>
            Test index calculation with missing spectral bands.
          <Function test_apply_depth_stratified_detection>
            Test depth-stratified kelp detection.
          <Function test_apply_depth_stratified_detection_species_factors>
            Test species-specific depth factor adjustments.
          <Function test_estimate_kelp_depths>
            Test kelp depth estimation.
          <Function test_model_water_column_properties>
            Test water column property modeling.
          <Function test_apply_quality_control>
            Test quality control filtering.
          <Function test_remove_small_patches>
            Test small patch removal.
          <Function test_combine_detection_layers>
            Test combining surface and submerged detection layers.
          <Function test_generate_detection_metadata>
            Test detection metadata generation.
          <Function test_detect_submerged_kelp_full_pipeline>
            Test the complete submerged kelp detection pipeline.
          <Function test_detect_submerged_kelp_without_depth_analysis>
            Test detection without depth analysis.
          <Function test_detect_submerged_kelp_error_handling>
            Test error handling in detection pipeline.
        <Class TestFactoryFunctions>
          Test factory functions and high-level interfaces.
          <Function test_create_submerged_kelp_detector>
            Test detector factory function.
          <Function test_detect_submerged_kelp_function>
            Test high-level detection function.
          <Function test_analyze_depth_distribution>
            Test depth distribution analysis.
          <Function test_analyze_depth_distribution_no_kelp>
            Test depth distribution analysis with no kelp detected.
        <Class TestIntegrationScenarios>
          Test integration scenarios and realistic use cases.
          <Function test_realistic_kelp_detection_scenario>
            Test detection with realistic kelp spectral signatures.
          <Function test_species_specific_detection_differences>
            Test that different species produce different detection results.
          <Function test_depth_estimation_accuracy>
            Test depth estimation produces reasonable results.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_dataset>
            Test handling of empty dataset.
          <Function test_dataset_with_nan_values>
            Test handling of dataset with NaN values.
          <Function test_very_small_dataset>
            Test handling of very small dataset.
          <Function test_extreme_spectral_values>
            Test handling of extreme spectral values.
          <Function test_no_water_context>
            Test detection without water context requirement.
      <Module test_temporal_validation.py>
        Tests for Temporal Validation & Environmental Drivers.

        This module tests the temporal validation framework for SKEMA kelp detection,
        including time-series persistence, seasonal patterns, and environmental correlations.
        <Class TestTemporalDataPoint>
          Test the TemporalDataPoint dataclass.
          <Function test_temporal_data_point_creation>
            Test creating a temporal data point.
        <Class TestSeasonalPattern>
          Test the SeasonalPattern dataclass.
          <Function test_seasonal_pattern_creation>
            Test creating a seasonal pattern.
        <Class TestTemporalValidator>
          Test the TemporalValidator class.
          <Function test_get_broughton_validation_config>
            Test getting Broughton Archipelago validation configuration.
          <Function test_generate_sampling_dates>
            Test generating sampling dates with specified interval.
          <Function test_calculate_kelp_area>
            Test kelp area calculation from detection mask.
          <Function test_calculate_confidence_score>
            Test confidence score calculation.
          <Function test_simulate_environmental_conditions>
            Test environmental conditions simulation.
          <Function test_assess_data_quality>
            Test data quality assessment.
          <Function test_get_season>
            Test season mapping from month.
          <Function test_analyze_seasonal_patterns>
            Test seasonal pattern analysis.
          <Function test_calculate_persistence_metrics>
            Test persistence metrics calculation.
          <Function test_analyze_environmental_correlations>
            Test environmental correlation analysis.
          <Function test_perform_trend_analysis>
            Test trend analysis.
          <Function test_assess_temporal_quality>
            Test temporal quality assessment.
          <Function test_generate_temporal_recommendations>
            Test temporal recommendation generation.
          <Coroutine test_collect_temporal_data_point>
            Test collecting a single temporal data point.
          <Coroutine test_validate_temporal_persistence>
            Test full temporal persistence validation.
          <Coroutine test_run_broughton_archipelago_validation>
            Test Broughton Archipelago validation.
          <Function test_generate_comprehensive_temporal_report>
            Test comprehensive temporal report generation.
          <Function test_calculate_detection_consistency>
            Test detection consistency calculation.
        <Class TestFactoryFunctions>
          Test factory functions and high-level interfaces.
          <Function test_create_temporal_validator>
            Test temporal validator factory function.
          <Coroutine test_run_broughton_temporal_validation>
            Test Broughton temporal validation factory function.
          <Coroutine test_run_comprehensive_temporal_analysis>
            Test comprehensive temporal analysis factory function.
        <Class TestEdgeCases>
          Test edge cases and error conditions.
          <Function test_empty_data_points>
            Test handling of empty data points list.
          <Function test_single_data_point>
            Test handling of single data point.
          <Function test_insufficient_data_for_correlations>
            Test correlation analysis with insufficient data.
          <Function test_nan_handling_in_correlations>
            Test handling of NaN values in correlation calculations.
          <Function test_extreme_detection_rates>
            Test handling of extreme detection rates.
          <Function test_temporal_gaps_identification>
            Test identification of temporal gaps.
          <Function test_insufficient_temporal_coverage>
            Test assessment with insufficient temporal coverage.
      <Module test_web_interface.py>
        Tests for web interface functionality.
        <Function test_root_serves_html>
          Test that root endpoint serves HTML content.
        <Function test_static_css_accessible>
          Test that CSS file is accessible via static mount.
        <Function test_static_js_accessible>
          Test that JavaScript file is accessible via static mount.
        <Function test_layers_js_accessible>
          Test that layers.js file is accessible via static mount.
        <Function test_layers_js_contains_async_functions>
          Test that layers.js contains async layer creation functions.
        <Function test_layers_js_layer_name_mapping>
          Test that layers.js contains layer name mapping functionality.
        <Function test_html_references_correct_static_paths>
          Test that HTML file references static files with correct paths.
        <Function test_html_contains_map_elements>
          Test that HTML contains required elements for map functionality.
        <Function test_html_contains_layer_control_elements>
          Test that HTML contains elements for layer controls.
        <Function test_html_has_proper_structure>
          Test that HTML has proper structure for the application.
        <Function test_nonexistent_static_file_returns_404>
          Test that non-existent static files return 404.
        <Function test_static_file_content_types[/static/style.css-text/css]>
          Test that static files return correct content types.
        <Function test_static_file_content_types[/static/app.js-javascript]>
          Test that static files return correct content types.
        <Function test_static_file_content_types[/static/layers.js-javascript]>
          Test that static files return correct content types.
        <Function test_javascript_contains_required_functions>
          Test that JavaScript contains required functions for map and API interaction.
        <Function test_layers_js_error_handling>
          Test that layers.js contains proper error handling.
        <Function test_layers_js_bounds_functionality>
          Test that layers.js contains bounds fetching functionality.
        <Function test_css_contains_required_styles>
          Test that CSS contains required styles for proper layout.

=================================== ERRORS ====================================
____________ ERROR collecting tests/unit/test_validation_plots.py _____________
ImportError while importing test module 'C:\dev\kelpie-carbon-v1\tests\unit\test_validation_plots.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\ryan\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\unit\test_validation_plots.py:16: in <module>
    from src.kelpie_carbon_v1.visualization.validation_plots import (
src\kelpie_carbon_v1\visualization\__init__.py:6: in <module>
    from .validation_plots import (
src\kelpie_carbon_v1\visualization\validation_plots.py:12: in <module>
    import plotly.graph_objects as go
E   ModuleNotFoundError: No module named 'plotly'
_ ERROR collecting tests_backup_20250611_164341/unit/test_validation_plots.py _
ImportError while importing test module 'C:\dev\kelpie-carbon-v1\tests_backup_20250611_164341\unit\test_validation_plots.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
C:\Users\ryan\AppData\Local\Programs\Python\Python312\Lib\importlib\__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests\unit\test_validation_plots.py:16: in <module>
    from src.kelpie_carbon_v1.visualization.validation_plots import (
src\kelpie_carbon_v1\visualization\__init__.py:6: in <module>
    from .validation_plots import (
src\kelpie_carbon_v1\visualization\validation_plots.py:12: in <module>
    import plotly.graph_objects as go
E   ModuleNotFoundError: No module named 'plotly'
_ ERROR collecting tests_backup_20250611_164341/validation/test_environmental_testing.py _
import file mismatch:
imported module 'test_environmental_testing' has this __file__ attribute:
  C:\dev\kelpie-carbon-v1\tests\validation\test_environmental_testing.py
which is not the same as the test file we want to collect:
  C:\dev\kelpie-carbon-v1\tests_backup_20250611_164341\validation\test_environmental_testing.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules
_ ERROR collecting tests_backup_20250611_164341/validation/test_real_world_validation.py _
import file mismatch:
imported module 'test_real_world_validation' has this __file__ attribute:
  C:\dev\kelpie-carbon-v1\tests\validation\test_real_world_validation.py
which is not the same as the test file we want to collect:
  C:\dev\kelpie-carbon-v1\tests_backup_20250611_164341\validation\test_real_world_validation.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules
_ ERROR collecting tests_backup_20250611_164341/validation/test_skema_research_benchmarks.py _
import file mismatch:
imported module 'test_skema_research_benchmarks' has this __file__ attribute:
  C:\dev\kelpie-carbon-v1\tests\validation\test_skema_research_benchmarks.py
which is not the same as the test file we want to collect:
  C:\dev\kelpie-carbon-v1\tests_backup_20250611_164341\validation\test_skema_research_benchmarks.py
HINT: remove __pycache__ / .pyc files and/or use a unique basename for your test file modules
============================== warnings summary ===============================
..\..\Users\ryan\AppData\Local\Programs\Python\Python312\Lib\site-packages\pydantic\_internal\_config.py:323
  C:\Users\ryan\AppData\Local\Programs\Python\Python312\Lib\site-packages\pydantic\_internal\_config.py:323: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.11/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

tests\e2e\test_integration_comprehensive.py:524
tests\e2e\test_integration_comprehensive.py:524
  C:\dev\kelpie-carbon-v1\tests\e2e\test_integration_comprehensive.py:524: PytestUnknownMarkWarning: Unknown pytest.mark.performance - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.performance

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
ERROR tests/unit/test_validation_plots.py
ERROR tests_backup_20250611_164341/unit/test_validation_plots.py
ERROR tests_backup_20250611_164341/validation/test_environmental_testing.py
ERROR tests_backup_20250611_164341/validation/test_real_world_validation.py
ERROR tests_backup_20250611_164341/validation/test_skema_research_benchmarks.py
!!!!!!!!!!!!!!!!!!! Interrupted: 5 errors during collection !!!!!!!!!!!!!!!!!!!
=================== 1383 tests collected, 5 errors in 2.18s ===================
