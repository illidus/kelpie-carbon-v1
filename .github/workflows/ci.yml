name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run ruff linting
        run: poetry run ruff check .

      - name: Run ruff formatting check
        run: poetry run ruff format --check .

  type:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run mypy type checking
        run: poetry run mypy src/

  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache pytest cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pytest
          key: ${{ runner.os }}-pytest-${{ hashFiles('**/pytest.ini', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pytest-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run unit tests (excluding slow tests)
        run: poetry run pytest -m "not slow"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./htmlcov/coverage.xml
          flags: unittests
          name: codecov-umbrella

  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Create test dataset
        run: |
          mkdir -p test_data
          echo '{"test": "data", "accuracy": 0.95}' > test_data/validation_results.json

      - name: Run validation CLI
        run: poetry run kelpie-carbon validation config

      - name: Run coverage gate check
        run: python scripts/check_coverage.py

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build docs
        run: poetry run mkdocs build

      - name: Upload docs artifact
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: docs-site
          path: site/

  nightly:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run slow tests
        run: poetry run pytest -m slow --tb=short

      - name: Run full test suite with coverage
        run: poetry run pytest --cov=src/kelpie_carbon --cov-report=xml

      - name: Upload nightly coverage
        uses: codecov/codecov-action@v3
        if: success()
        with:
          file: ./coverage.xml
          flags: nightly
          name: nightly-coverage

  pages-deploy:
    needs: [lint, type, unit, validate, docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download docs artifact
        uses: actions/download-artifact@v3
        with:
          name: docs-site
          path: site/

      - name: Configure Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
