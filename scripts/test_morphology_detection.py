#!/usr/bin/env python3
"""Test script for morphological detection functionality.

This script demonstrates the advanced morphological detection system
that completes Task C2.2 - Morphology-based detection algorithms.
"""

import sys

import numpy as np

from kelpie_carbon_v1.processing.morphology_detector import (
    MorphologyDetector,
    create_morphology_detector,
)
from kelpie_carbon_v1.processing.species_classifier import (
    SpeciesClassifier,
    create_species_classifier,
)


def create_realistic_test_data():
    """Create realistic test data for morphological detection testing."""
    # Create RGB image with kelp-like patterns
    rgb_image = (np.random.rand(200, 200, 3) * 255).astype(np.uint8)

    # Create kelp mask with complex shapes
    kelp_mask = np.zeros((200, 200), dtype=bool)

    # Add Nereocystis-like patterns (with potential pneumatocysts)
    kelp_mask[50:150, 30:80] = True

    # Add Macrocystis-like patterns (elongated blades)
    kelp_mask[120:180, 120:170] = True

    # Add some isolated patches
    kelp_mask[20:40, 150:170] = True
    kelp_mask[160:180, 50:70] = True

    return rgb_image, kelp_mask


def test_pneumatocyst_detection():
    """Test pneumatocyst detection capabilities."""
    print("üîç Testing Pneumatocyst Detection (Nereocystis indicator)")
    print("=" * 60)

    rgb_image, kelp_mask = create_realistic_test_data()

    # Create morphology detector
    morphology_detector = create_morphology_detector()

    # Run morphological analysis
    result = morphology_detector.analyze_morphology(rgb_image, kelp_mask)

    print(f"üìä Morphological Analysis Results:")
    print(f"   ‚Ä¢ Pneumatocyst count: {result.pneumatocyst_count}")
    print(f"   ‚Ä¢ Total pneumatocyst area: {result.total_pneumatocyst_area:.1f} pixels")
    print(f"   ‚Ä¢ Morphology confidence: {result.morphology_confidence:.3f}")
    print()

    # Test individual pneumatocyst features
    pneumatocysts = [
        f for f in result.detected_features if f.feature_type.value == "pneumatocyst"
    ]

    if pneumatocysts:
        print(f"üéØ Detected {len(pneumatocysts)} pneumatocyst features:")
        for i, p in enumerate(pneumatocysts):
            print(f"   Pneumatocyst {i+1}:")
            print(f"     - Confidence: {p.confidence:.3f}")
            print(f"     - Area: {p.area:.1f} pixels")
            print(f"     - Circularity: {p.circularity:.3f}")
            print(f"     - Aspect ratio: {p.aspect_ratio:.2f}")
            print(f"     - Location: ({p.centroid[0]:.1f}, {p.centroid[1]:.1f})")
    else:
        print("‚ÑπÔ∏è  No pneumatocysts detected in test data")

    print()


def test_blade_frond_detection():
    """Test blade and frond detection capabilities."""
    print("üîç Testing Blade/Frond Detection (Macrocystis indicator)")
    print("=" * 60)

    rgb_image, kelp_mask = create_realistic_test_data()

    # Create morphology detector
    morphology_detector = create_morphology_detector()

    # Run morphological analysis
    result = morphology_detector.analyze_morphology(rgb_image, kelp_mask)

    print(f"üìä Blade/Frond Analysis Results:")
    print(f"   ‚Ä¢ Blade count: {result.blade_count}")
    print(f"   ‚Ä¢ Frond count: {result.frond_count}")
    print(f"   ‚Ä¢ Total blade area: {result.total_blade_area:.1f} pixels")
    print(f"   ‚Ä¢ Total frond area: {result.total_frond_area:.1f} pixels")
    print()

    # Test individual blade/frond features
    blades = [f for f in result.detected_features if f.feature_type.value == "blade"]
    fronds = [f for f in result.detected_features if f.feature_type.value == "frond"]

    if blades:
        print(f"üåø Detected {len(blades)} blade features:")
        for i, b in enumerate(blades):
            print(f"   Blade {i+1}:")
            print(f"     - Confidence: {b.confidence:.3f}")
            print(f"     - Area: {b.area:.1f} pixels")
            print(
                f"     - Aspect ratio: {b.aspect_ratio:.2f} (elongated: {b.aspect_ratio > 2.0})"
            )
            print(f"     - Solidity: {b.solidity:.3f}")

    if fronds:
        print(f"üçÉ Detected {len(fronds)} frond features:")
        for i, f in enumerate(fronds):
            print(f"   Frond {i+1}:")
            print(f"     - Confidence: {f.confidence:.3f}")
            print(f"     - Area: {f.area:.1f} pixels")
            print(f"     - Eccentricity: {f.eccentricity:.3f}")
            print(f"     - Complexity: {f.properties.get('complexity', 'N/A')}")

    if not blades and not fronds:
        print("‚ÑπÔ∏è  No blades or fronds detected in test data")

    print()


def test_species_indicators():
    """Test species indicator calculations."""
    print("üîç Testing Species Indicator Calculations")
    print("=" * 60)

    rgb_image, kelp_mask = create_realistic_test_data()

    # Create morphology detector
    morphology_detector = create_morphology_detector()

    # Run morphological analysis
    result = morphology_detector.analyze_morphology(rgb_image, kelp_mask)

    print(f"üìä Species Indicator Scores:")
    for indicator, score in result.species_indicators.items():
        print(f"   ‚Ä¢ {indicator}: {score:.3f}")

    print()

    # Interpret indicators
    nereocystis_score = result.species_indicators.get(
        "nereocystis_morphology_score", 0.0
    )
    macrocystis_score = result.species_indicators.get(
        "macrocystis_morphology_score", 0.0
    )
    complexity = result.species_indicators.get("morphological_complexity", 0.0)

    print(f"üß¨ Species Likelihood (based on morphology):")
    print(
        f"   ‚Ä¢ Nereocystis luetkeana: {nereocystis_score:.3f} ({'High' if nereocystis_score > 0.6 else 'Medium' if nereocystis_score > 0.3 else 'Low'})"
    )
    print(
        f"   ‚Ä¢ Macrocystis pyrifera: {macrocystis_score:.3f} ({'High' if macrocystis_score > 0.6 else 'Medium' if macrocystis_score > 0.3 else 'Low'})"
    )
    print(
        f"   ‚Ä¢ Morphological complexity: {complexity:.3f} ({'Complex' if complexity > 0.7 else 'Moderate' if complexity > 0.4 else 'Simple'})"
    )

    print()


def test_enhanced_species_classification():
    """Test enhanced species classification with morphological features."""
    print("üîç Testing Enhanced Species Classification")
    print("=" * 60)

    rgb_image, kelp_mask = create_realistic_test_data()

    # Create species classifier with morphology enabled
    classifier = SpeciesClassifier(enable_morphology=True)

    # Create mock spectral indices for testing
    spectral_indices = {
        "ndvi": np.random.rand(200, 200) * 0.5 + 0.2,
        "ndre": np.random.rand(200, 200) * 0.4 + 0.3,
        "waf": np.random.rand(200, 200) * 0.3 + 0.1,
    }

    # Run species classification
    result = classifier.classify_species(
        rgb_image=rgb_image,
        spectral_indices=spectral_indices,
        kelp_mask=kelp_mask,
        metadata={
            "latitude": 49.0,
            "longitude": -125.0,
        },  # British Columbia coordinates
    )

    print(f"üéØ Species Classification Results:")
    print(f"   ‚Ä¢ Primary species: {result.primary_species.value}")
    print(f"   ‚Ä¢ Confidence: {result.confidence:.3f}")
    print()

    print(f"üìä Species Probabilities:")
    for species, prob in result.species_probabilities.items():
        print(f"   ‚Ä¢ {species.value}: {prob:.3f}")
    print()

    print(f"üî¨ Enhanced Morphological Features:")
    morph_features = result.morphological_features
    advanced_features = [
        "pneumatocyst_count",
        "blade_count",
        "frond_count",
        "morphology_confidence",
        "pneumatocyst_density",
    ]

    for feature in advanced_features:
        if feature in morph_features:
            print(f"   ‚Ä¢ {feature}: {morph_features[feature]:.3f}")

    print()

    if result.biomass_estimate_kg_per_m2:
        print(f"‚öñÔ∏è  Biomass estimate: {result.biomass_estimate_kg_per_m2:.2f} kg/m¬≤")
    else:
        print("‚öñÔ∏è  Biomass estimate: Not available")

    print()


def test_performance_comparison():
    """Test performance comparison between basic and advanced morphology."""
    print("üîç Testing Performance Comparison")
    print("=" * 60)

    rgb_image, kelp_mask = create_realistic_test_data()

    # Test with advanced morphology
    print("üöÄ Testing with ADVANCED morphological analysis:")
    classifier_advanced = SpeciesClassifier(enable_morphology=True)

    import time

    start_time = time.time()
    result_advanced = classifier_advanced.classify_species(
        rgb_image=rgb_image,
        spectral_indices={"ndvi": np.random.rand(200, 200) * 0.5},
        kelp_mask=kelp_mask,
    )
    advanced_time = time.time() - start_time

    print(f"   ‚Ä¢ Processing time: {advanced_time:.3f} seconds")
    print(f"   ‚Ä¢ Features extracted: {len(result_advanced.morphological_features)}")
    print(f"   ‚Ä¢ Classification confidence: {result_advanced.confidence:.3f}")
    print()

    # Test with basic morphology (fallback)
    print("‚ö° Testing with BASIC morphological analysis:")
    classifier_basic = SpeciesClassifier(enable_morphology=False)

    start_time = time.time()
    result_basic = classifier_basic.classify_species(
        rgb_image=rgb_image,
        spectral_indices={"ndvi": np.random.rand(200, 200) * 0.5},
        kelp_mask=kelp_mask,
    )
    basic_time = time.time() - start_time

    print(f"   ‚Ä¢ Processing time: {basic_time:.3f} seconds")
    print(f"   ‚Ä¢ Features extracted: {len(result_basic.morphological_features)}")
    print(f"   ‚Ä¢ Classification confidence: {result_basic.confidence:.3f}")
    print()

    print(f"üìà Performance Comparison:")
    print(f"   ‚Ä¢ Time difference: {(advanced_time - basic_time):.3f} seconds")
    print(
        f"   ‚Ä¢ Feature enhancement: +{len(result_advanced.morphological_features) - len(result_basic.morphological_features)} features"
    )
    print(
        f"   ‚Ä¢ Accuracy improvement: {(result_advanced.confidence - result_basic.confidence):.3f}"
    )

    print()


def main():
    """Run all morphological detection tests."""
    print("üß¨ KELPIE CARBON v1 - MORPHOLOGICAL DETECTION SYSTEM TEST")
    print("Task C2.2: Morphology-based Detection Algorithms")
    print("=" * 70)
    print()

    try:
        test_pneumatocyst_detection()
        test_blade_frond_detection()
        test_species_indicators()
        test_enhanced_species_classification()
        test_performance_comparison()

        print("‚úÖ ALL MORPHOLOGICAL DETECTION TESTS COMPLETED SUCCESSFULLY!")
        print()
        print("üéâ Task C2.2 Implementation Summary:")
        print("   ‚úÖ Pneumatocyst detection for Nereocystis luetkeana")
        print("   ‚úÖ Blade vs. frond differentiation for Macrocystis pyrifera")
        print("   ‚úÖ Advanced morphological feature extraction")
        print("   ‚úÖ Enhanced species classification accuracy")
        print("   ‚úÖ Integration with existing species classifier")
        print("   ‚úÖ Performance optimization and fallback mechanisms")
        print()
        print("üî¨ SKEMA Phase 4: Species-Level Detection - SUBSTANTIALLY ENHANCED")

        return True

    except Exception as e:
        print(f"‚ùå ERROR in morphological detection testing: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
